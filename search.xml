<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DES算法逆向分析</title>
    <url>/undefined/DES%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="DES算法逆向分析"><a href="#DES算法逆向分析" class="headerlink" title="DES算法逆向分析"></a>DES算法逆向分析</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>了解DES算法的基本流程：</p>
<p><img src="https://img-blog.csdnimg.cn/20210327093613965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20210327093642767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="一-用IDA打开，得到汇编代码"><a href="#一-用IDA打开，得到汇编代码" class="headerlink" title="一. 用IDA打开，得到汇编代码"></a>一. 用IDA打开，得到汇编代码</h3><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504112827232.png" alt="image-20210504112827232"></p>
<h3 id="二-逐层分析"><a href="#二-逐层分析" class="headerlink" title="二. 逐层分析"></a>二. 逐层分析</h3><h4 id="1-整体初始化"><a href="#1-整体初始化" class="headerlink" title="1. 整体初始化"></a>1. 整体初始化</h4><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504112933054.png" alt="image-20210504112933054"></p>
<p>rep stosd之前为栈的初始化，为程序分配栈空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov     eax, ds:dword_428458  </span><br><span class="line">mov     dword ptr [ebp+var_C], eax </span><br><span class="line">mov     ecx, ds:dword_42845C</span><br><span class="line">mov     dword ptr [ebp+var_C+4], ecx</span><br><span class="line">mov     dl, ds:byte_428460</span><br><span class="line">mov     [ebp+var_C+8], dl</span><br></pre></td></tr></table></figure>

<p>将dword_428458的值’_3ED’和dword_42845c的值’C1nE’分配到ptr [ebp+var_C+8]数组空间中，并且按照小端存储方式，最终的数组内容为’DE3_En1C’(即为初始密钥)</p>
<p>接下来为调用scanf函数，按照要求‘give me a string to encrypt’ 输入一串字符Str,判断Str长度，如果长度为8则跳转到 short loc_40111D</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call    _strlen</span><br><span class="line">add     esp, 4</span><br><span class="line">cmp     eax, 8</span><br><span class="line">jz      short loc_40111D</span><br></pre></td></tr></table></figure>

<p>否则执行system(‘pause’)指令,令eax的值为-1，并跳转到loc_4011A6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push    offset Command  ; &quot;pause&quot;</span><br><span class="line">call    _system</span><br><span class="line">add     esp, 4</span><br><span class="line">or      eax, 0FFFFFFFFh</span><br><span class="line">jmp     loc_4011A6</span><br></pre></td></tr></table></figure>

<p>之后进行整个函数栈的销毁</p>
<h3 id="2-主函数分析"><a href="#2-主函数分析" class="headerlink" title="2. 主函数分析"></a>2. 主函数分析</h3><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504172352467.png" alt="image-20210504172352467"></p>
<p>调用了两个函数，首先对call <code>sub_40100F</code>分析，进入函数</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504172452325.png" alt="image-20210504172452325"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">; Attributes: bp-based frame</span><br><span class="line"></span><br><span class="line">sub_401BE0 proc near</span><br><span class="line"></span><br><span class="line">var_EC= <span class="keyword">byte</span> ptr -0ECh</span><br><span class="line">var_AC= dword ptr -0ACh</span><br><span class="line">Src= <span class="keyword">byte</span> ptr -0A8h</span><br><span class="line">var_78= dword ptr -78h</span><br><span class="line">var_5C= dword ptr -5Ch</span><br><span class="line">var_40= <span class="keyword">byte</span> ptr -40h</span><br><span class="line">arg_0= dword ptr  <span class="number">8</span></span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 0ECh</span><br><span class="line">push    ebx</span><br><span class="line">push    esi</span><br><span class="line">push    edi</span><br><span class="line">lea     edi, [ebp+var_EC]</span><br><span class="line">mov     ecx, 3Bh</span><br><span class="line">mov     eax, 0CCCCCCCCh</span><br><span class="line">rep stosd    				<span class="comment">//函数栈空间的初始化和分配0ECh大小的空间</span></span><br><span class="line">push    <span class="number">8</span>					<span class="comment">//将8压入栈</span></span><br><span class="line">lea     eax, [ebp+var_40]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">push    ecx</span><br><span class="line">call    sub_40101E         <span class="comment">//调用sub_40101E函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">lea     edx, [ebp+var_78]</span><br><span class="line">push    edx</span><br><span class="line">lea     eax, [ebp+var_40]</span><br><span class="line">push    eax</span><br><span class="line">call    sub_401046 		  <span class="comment">//调用sub_401046函数</span></span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">mov     [ebp+var_AC], <span class="number">0</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_401C3B  </span><br></pre></td></tr></table></figure>

<p>接下来对内部调用的两个函数进行分析</p>
<ol>
<li>进入sub_40101E函数分析：</li>
</ol>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504181719970.png" alt="image-20210504181719970"></p>
<p>第一块同样为初始化，第二块开始为两层循环，第一层判断ecx计数器次数是否等于[ebp+args_8]的值也就是之前压入栈的8，如果大于等于则跳转到loc_401426进行pop栈销毁，否则进入下一层循环，对应loc_4013F4处，判断是否循环少于8次，少于进入循环内部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+arg_0]    <span class="comment">//将[ebp+arg_0]变量（第一个参数）赋给eax</span></span><br><span class="line">add     eax, [ebp+var_4]   <span class="comment">//eax加上第一层循环的循环变量[ebp+var_4]</span></span><br><span class="line">xor     ecx, ecx          <span class="comment">//ecx清零，也就是第二层循环重新开始</span></span><br><span class="line">mov     cl, [eax]         <span class="comment">//eax值赋给cl段</span></span><br><span class="line">mov     edx, ecx          <span class="comment">//上一层的ecx值赋给edx</span></span><br><span class="line">mov     ecx, <span class="number">7</span>            <span class="comment">//ecx的值赋为7</span></span><br><span class="line">sub     ecx, [ebp+var_8]   <span class="comment">//ecx(7)减第二层循环变量[ebp+var_8]</span></span><br><span class="line">sar     edx, cl            <span class="comment">//将edx的值算数右移cl位</span></span><br><span class="line">and     edx, <span class="number">1</span>             <span class="comment">//将右移后edx值和1进行按位与运算</span></span><br><span class="line">mov     eax, [ebp+var_4]   <span class="comment">//将第一层循环变量值赋给eax</span></span><br><span class="line">mov     ecx, [ebp+var_8]   <span class="comment">//将第二层循环变量值赋给ecx</span></span><br><span class="line">lea     eax, [ecx+eax*<span class="number">8</span>]   <span class="comment">//8*eax+ecx并装入eax</span></span><br><span class="line">mov     ecx, [ebp+arg_4]   <span class="comment">//第二个参数赋给ecx</span></span><br><span class="line">mov     [ecx+eax], dl       <span class="comment">//之前算出(右移，与运算）的dx寄存器内（低8位）的值赋给ecx和eax值的和</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_4013EB    <span class="comment">//跳转到loc_4013E8</span></span><br></pre></td></tr></table></figure>

<p>loc_4013E8函数内进行第二层循环变量自增，loc_4013D1函数内为第一层循环变量的自增。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol start="2">
<li>进入sub_401046函数分析：</li>
</ol>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504185044393.png" alt="image-20210504185044393"></p>
<p>直接看第二块循环语句，循环38h(56)次，在循环内：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+var_4]     </span><br><span class="line">movsx (带符号扩展)  edx, ds:byte_4280EC[ecx]</span><br><span class="line">mov     eax, [ebp+arg_4]   </span><br><span class="line">add     eax, [ebp+var_4]   <span class="comment">//第二个形参加上循环变量[ebp+var_4]，并存到eax</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">mov     dl, [ecx+edx-<span class="number">1</span>]   </span><br><span class="line">mov     [eax], dl</span><br><span class="line">jmp     <span class="keyword">short</span> loc_401A51</span><br></pre></td></tr></table></figure>

<p>实现的功能为：将byte_4280EC[]数组(最大56轮)的值加上函数第一个形参ecx，再减1，将值存到dl寄存器，再将dl的值赋给eax所指向内存单元的字节数，之后循环变量自增。</p>
<p>回到主函数第二块分析：是一个for循环语句，判断循环变量[ebp+var_AC]的值是否等于（10h)16，如果大于等于16则跳转到loc_401CB9,进行函数栈销毁，小于则进入循环</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504175950394.png" alt="image-20210504175950394"></p>
<p>进入循环内部：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     edx, [ebp+var_AC]</span><br><span class="line">movsx   eax, ds:byte_428154[edx]</span><br><span class="line">push    eax             ; <span class="keyword">int</span></span><br><span class="line">lea     ecx, [ebp+var_78]</span><br><span class="line">push    ecx             ; <span class="keyword">int</span></span><br><span class="line">lea     edx, [ebp+var_78]</span><br><span class="line">push    edx             ; Src</span><br><span class="line">call    sub_401014   				<span class="comment">//对[ebp+var_78]调用sub_401014函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">mov     eax, [ebp+var_AC]</span><br><span class="line">movsx   ecx, ds:byte_428154[eax]</span><br><span class="line">push    ecx             ; <span class="keyword">int</span></span><br><span class="line">lea     edx, [ebp+var_5C]</span><br><span class="line">push    edx             ; <span class="keyword">int</span></span><br><span class="line">lea     eax, [ebp+var_5C]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">call    sub_401014					 <span class="comment">//第二次调用sub_401014函数,参数为[ebp+var_5C]和byte_428154[eax]</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">lea     ecx, [ebp+Src]</span><br><span class="line">push    ecx</span><br><span class="line">lea     edx, [ebp+var_78]</span><br><span class="line">push    edx</span><br><span class="line">call    sub_40100A					<span class="comment">//调用sub_40100A，参数为[ebp+var_78]和Src</span></span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    30h ; <span class="string">&#x27;0&#x27;</span>       ; Size		<span class="comment">//将48压入栈</span></span><br><span class="line">lea     eax, [ebp+Src]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">mov     ecx, [ebp+var_AC]</span><br><span class="line">imul    ecx, 30h ; <span class="string">&#x27;0&#x27;</span>              </span><br><span class="line">add     ecx, offset unk_42DC9C     <span class="comment">//将ecx计数器的值和48相乘再加上地址为unk_42DC9C处的值，结果存到ecx</span></span><br><span class="line">push    ecx             ; <span class="keyword">void</span> *</span><br><span class="line">call    _memcpy			            <span class="comment">//调用memcpy函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">jmp     loc_401C2C                 <span class="comment">//之后是循环变量自增</span></span><br></pre></td></tr></table></figure>

<p>对调用的函数依次分析：</p>
<ol>
<li><p>进入sub_401014</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504190902400.png" alt="&#39;image-20210504190902400&#39;"></p>
</li>
</ol>
<p>对第一块，分配64h大小的空间调用memcpy函数，将Src字符串的内容赋给[ebp+var_1c]数组，将变量[ebp+var_24](用v4表示）初始化为0，接下来为while循环，[ebp+var_20]（用v5表示）为循环变量，循环大小为1Ch即28，在while循环内部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+arg_4]       </span><br><span class="line">add     ecx, [ebp+var_24]      <span class="comment">//第二个形参和v4相加，存到ecx</span></span><br><span class="line">mov     edx, [ebp+var_20]       <span class="comment">//v5赋给edx</span></span><br><span class="line">mov     al, [ebp+edx+var_1C]   <span class="comment">//在数组内寻找v5指向的字节，存到al寄存器</span></span><br><span class="line">mov     [ecx], al              <span class="comment">//将al寄存器的值赋给ecx指向在内存的字节</span></span><br><span class="line">mov     ecx, [ebp+var_24]  </span><br><span class="line">add     ecx, <span class="number">1</span>                <span class="comment">//v4自增</span></span><br><span class="line">mov     [ebp+var_24], ecx</span><br><span class="line">jmp     <span class="keyword">short</span> loc_401B49</span><br></pre></td></tr></table></figure>

<p>之后是一个for循环</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504191827485.png" alt="image-20210504191827485"></p>
<p>for循环内，判断循环变量[ebp+var_20]是否大于等于第三个形参[ebp+arg_8]，若大于等于则跳出循环（add esp,64h)，否则和while循环内容实现功能相同。</p>
<ol start="2">
<li>进入sub_40100A函数</li>
</ol>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504193240015.png" alt="image-20210504193240015"></p>
<p>是一个for 循环，循环大小为30h（48），循环变量为[ebp+var_4]（用i表示），先初始化为0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">movsx   edx, ds:byte_428124[ecx]   <span class="comment">//按i指向的字节数组byte的对应值赋给edx</span></span><br><span class="line">mov     eax, [ebp+arg_4]  </span><br><span class="line">add     eax, [ebp+var_4]    <span class="comment">//i+第二个参数[ebp+arg_4],存到eax</span></span><br><span class="line">mov     ecx, [ebp+arg_0]    <span class="comment">//第一个形参存到ecx</span></span><br><span class="line">mov     dl, [ecx+edx-<span class="number">1</span>]   <span class="comment">// edx的值和第一个形参指向内存的字节单元值存到dl寄存器</span></span><br><span class="line">mov     [eax], dl         <span class="comment">//dl寄存器的值赋给eax指向内存的字节单元</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_401AC1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>memcpy函数实现将Src字符串的值赋给ecx寄存器内的值，大小为48u</li>
</ol>
<p>回到主函数:</p>
<h4 id="轮函数sub-401032"><a href="#轮函数sub-401032" class="headerlink" title="轮函数sub_401032"></a>轮函数sub_401032</h4><p>分析调用的第二个函数call sub_401032：</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504195227264.png" alt="image-20210504195227264"></p>
<p>第一块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 0E4h</span><br><span class="line">push    ebx</span><br><span class="line">push    esi</span><br><span class="line">push    edi</span><br><span class="line">lea     edi, [ebp+var_E4]</span><br><span class="line">mov     ecx, 39h</span><br><span class="line">mov     eax, 0CCCCCCCCh  </span><br><span class="line">rep stosd  							<span class="comment">//初始化</span></span><br><span class="line">push    <span class="number">8</span></span><br><span class="line">lea     eax, [ebp+Src]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">push    ecx    </span><br><span class="line">call    sub_40101E      			<span class="comment">//调用sub_40101E函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">lea     edx, [ebp+Src]</span><br><span class="line">push    edx             ; <span class="keyword">int</span></span><br><span class="line">lea     eax, [ebp+Src]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">call    sub_401028  				<span class="comment">//调用sub_401028函数</span></span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">push    20h(<span class="number">32</span>) ; <span class="string">&#x27; &#x27;</span>       ; Size</span><br><span class="line">lea     ecx, [ebp+Src]</span><br><span class="line">push    ecx             ; Src</span><br><span class="line">lea     edx, [ebp+var_84]</span><br><span class="line">push    edx             ; <span class="keyword">void</span> *</span><br><span class="line">call    _memcpy                   <span class="comment">//</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">push    20h (<span class="number">32</span>); <span class="string">&#x27; &#x27;</span>       ; Size     </span><br><span class="line">lea     eax, [ebp+var_24]</span><br><span class="line">push    eax             ; Src</span><br><span class="line">lea     ecx, [ebp+var_A4]</span><br><span class="line">push    ecx             ; <span class="keyword">void</span> *</span><br><span class="line">call    _memcpy					  <span class="comment">//调用两次memcpy函数</span></span><br><span class="line">add     esp, 0Ch</span><br><span class="line">mov     [ebp+var_4], <span class="number">0</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_40124C</span><br></pre></td></tr></table></figure>

<ol>
<li><p>对于sub_40101E函数，之前已经分析过，可知其实现功能为：</p>
</li>
<li><p>对于sub_401028函数</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504201219915.png" alt="image-20210504201219915"></p>
</li>
</ol>
<p>在第一块，先调用了mempy函数将Src内容拷贝给了</p>
<p>第二块为一个循环语句，进行40h（64）轮循环，在每轮循环中，将byte_42801C数组对应得值加上[ebp+var_45]指向内存的值，并将值赋给循环变量[ebp+var_4]和[ebp+arg_4]的和（这里的函数功能与之前的类似，简要说明）</p>
<ol start="3">
<li><p>接下来调用了两次memcpy函数</p>
</li>
<li><p>之后进行了15轮循环</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504202117422.png" alt="image-20210504202117422"></p>
</li>
</ol>
<p>观察发现，在循环内和循环外，都调用了sub_401005,sub_401023函数，对于</p>
<h5 id="sub-401005函数："><a href="#sub-401005函数：" class="headerlink" title="sub_401005函数："></a>sub_401005函数：</h5><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504204745766.png" alt="image-20210504204745766"></p>
<p>发现依次调用了sub_40104B, sub_401023, sub_40103C，sub_401037函数，并在最后调用了memcpy函数，将Src的值赋值给了[ebp+arg_4]</p>
<p>依次分析：</p>
<h6 id="i-sub-40104B"><a href="#i-sub-40104B" class="headerlink" title="(i) sub_40104B"></a>(i) sub_40104B</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504205118176.png" alt="image-20210504205118176"></p>
<p>首先调用了memcpy函数，将Src的值赋给了[ebp+var_30]，看第二块发现是for循环，循环48次，在循环内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+var_34]            <span class="comment">//循环变量[ebp+var_34]（用i表示）</span></span><br><span class="line">movsx   ecx, ds:byte_42809C[eax]     <span class="comment">//i对应的byte_42809C的值存到ecx</span></span><br><span class="line">mov     edx, [ebp+arg_4]</span><br><span class="line">add     edx, [ebp+var_34]            <span class="comment">//i与[ebp+arg_4]相加</span></span><br><span class="line">mov     al, <span class="keyword">byte</span> ptr [ebp+ecx+var_34+<span class="number">3</span>] <span class="comment">//ecx+3+i对应的字节数组赋给i与[ebp+arg_4]的和</span></span><br><span class="line">mov     [edx], al</span><br><span class="line">jmp     <span class="keyword">short</span> loc_401693</span><br></pre></td></tr></table></figure>



<h6 id="ii-sub-401023函数"><a href="#ii-sub-401023函数" class="headerlink" title="(ii) sub_401023函数"></a>(ii) sub_401023函数</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504203429412.png" alt="image-20210504203429412"></p>
<p>同样为一个for循环，循环次数为[ebp+arg_8]对应的值（即32次），在循环内部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     edx, [ebp+arg_0]    </span><br><span class="line">add     edx, [ebp+var_4]   <span class="comment">//循环变量与[ebp+arg_0]相加</span></span><br><span class="line">xor     eax, eax          <span class="comment">//eax清零</span></span><br><span class="line">mov     al, [edx]         <span class="comment">//存到al</span></span><br><span class="line">mov     ecx, [ebp+arg_4]  </span><br><span class="line">add     ecx, [ebp+var_4]  <span class="comment">//循环变量与[ebp+arg_4]相加</span></span><br><span class="line">xor     edx, edx          <span class="comment">//edx清零</span></span><br><span class="line">mov     dl, [ecx]         <span class="comment">//存到dl</span></span><br><span class="line">add     eax, edx          <span class="comment">//两次结果相加</span></span><br><span class="line">and     eax, <span class="number">1</span>            <span class="comment">//和与1按位与</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">add     ecx, [ebp+var_4]    </span><br><span class="line">mov     [ecx], al         <span class="comment">//和赋给（循环变量和[ebp+var_arg0]的和）</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_401921</span><br></pre></td></tr></table></figure>



<h6 id="iii-sub-40103C"><a href="#iii-sub-40103C" class="headerlink" title="(iii) sub_40103C"></a>(iii) sub_40103C</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504205824037.png" alt="image-20210504205824037"></p>
<p>第二块：while循环，[ebp+var_4]为循环变量（用i表示），循环8次，在循环内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">imul    ecx, <span class="number">6</span>         				<span class="comment">//6*i</span></span><br><span class="line">mov     edx, [ebp+arg_0]     </span><br><span class="line">xor     eax, eax               <span class="comment">//eax清零</span></span><br><span class="line">mov     al, [edx+ecx]</span><br><span class="line">shl     eax, <span class="number">1</span>					<span class="comment">//左移1位</span></span><br><span class="line">mov     ecx, [ebp+var_4]</span><br><span class="line">imul    ecx, <span class="number">6</span>                 <span class="comment">//6*i</span></span><br><span class="line">mov     edx, [ebp+arg_0]        </span><br><span class="line">xor     ebx, ebx        		<span class="comment">//ebx清零</span></span><br><span class="line">mov     bl, [edx+ecx+<span class="number">5</span>]         <span class="comment">//和+5</span></span><br><span class="line">or      eax, ebx                <span class="comment">//eax和ebx进行或运算</span></span><br><span class="line">and     eax, <span class="number">3</span>    				<span class="comment">//eax和3按位与</span></span><br><span class="line"></span><br><span class="line">mov     [ebp+var_C], eax</span><br><span class="line">mov     eax, [ebp+var_4]</span><br><span class="line">imul    eax, <span class="number">6</span>          </span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     edx, edx</span><br><span class="line">mov     dl, [ecx+eax+<span class="number">1</span>]</span><br><span class="line">shl     edx, <span class="number">3</span>                   <span class="comment">//左移3位</span></span><br><span class="line">mov     eax, [ebp+var_4]</span><br><span class="line">imul    eax, <span class="number">6</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx                <span class="comment">//ebx清零</span></span><br><span class="line">mov     bl, [ecx+eax+<span class="number">2</span>]</span><br><span class="line">shl     ebx, <span class="number">2</span></span><br><span class="line">or      edx, ebx</span><br><span class="line">mov     eax, [ebp+var_4]        </span><br><span class="line">imul    eax, <span class="number">6</span>         </span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">mov     bl, [ecx+eax+<span class="number">3</span>]</span><br><span class="line">shl     ebx, <span class="number">1</span>				<span class="comment">//左移1位</span></span><br><span class="line">or      edx, ebx</span><br><span class="line">mov     eax, [ebp+var_4]</span><br><span class="line">imul    eax, <span class="number">6</span></span><br><span class="line">mov     ecx, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">mov     bl, [ecx+eax+<span class="number">4</span>]</span><br><span class="line">or      edx, ebx</span><br><span class="line">and     edx, 0Fh（<span class="number">15</span>）			<span class="comment">//与15按位与</span></span><br><span class="line"></span><br><span class="line">mov     [ebp+var_10], edx</span><br><span class="line">mov     edx, [ebp+var_4]</span><br><span class="line">shl     edx, <span class="number">6</span></span><br><span class="line">mov     eax, [ebp+var_C]</span><br><span class="line">shl     eax, <span class="number">4</span></span><br><span class="line">mov     ecx, [ebp+var_10]</span><br><span class="line">add     ecx, edx</span><br><span class="line">movsx   edx, ds:byte_428164[eax+ecx]</span><br><span class="line">and     edx, 0Fh（<span class="number">15</span>）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v3 &#x3D; byte_428164[64 * v5</span><br><span class="line">                   + 16 * ((*(_BYTE *)(a1 + 6 * v5 + 5) | (unsigned __int8)(2 * *(_BYTE *)(a1 + 6 * v5))) &amp; 3)</span><br><span class="line">                   + ((*(_BYTE *)(a1 + 6 * v5 + 4) | (unsigned __int8)((2 * *(_BYTE *)(a1 + 6 * v5 + 3)) | (4 * *(_BYTE *)(a1 + 6 * v5 + 2)) | (8 * *(_BYTE *)(a1 + 6 * v5 + 1)))) &amp; 15)] &amp; 15;</span><br></pre></td></tr></table></figure>

<p>大致运算如上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     [ebp+var_14], dl</span><br><span class="line">movsx   eax, [ebp+var_14]</span><br><span class="line">sar<span class="comment">//右移     eax, 3</span></span><br><span class="line">and     eax, <span class="number">1</span></span><br><span class="line">mov     ecx, [ebp+arg_4]</span><br><span class="line">add     ecx, [ebp+var_8]</span><br><span class="line">mov     [ecx], al</span><br><span class="line">movsx   edx, [ebp+var_14]</span><br><span class="line">sar     edx, <span class="number">2</span></span><br><span class="line">and     edx, <span class="number">1</span></span><br><span class="line">mov     eax, [ebp+arg_4]</span><br><span class="line">add     eax, [ebp+var_8]</span><br><span class="line">mov     [eax+<span class="number">1</span>], dl</span><br><span class="line">movsx   ecx, [ebp+var_14]</span><br><span class="line">sar     ecx, <span class="number">1</span></span><br><span class="line">and     ecx, <span class="number">1</span></span><br><span class="line">mov     edx, [ebp+arg_4]</span><br><span class="line">add     edx, [ebp+var_8]</span><br><span class="line">mov     [edx+<span class="number">2</span>], cl</span><br><span class="line">movsx   eax, [ebp+var_14]</span><br><span class="line">and     eax, <span class="number">1</span></span><br><span class="line">mov     ecx, [ebp+arg_4]</span><br><span class="line">add     ecx, [ebp+var_8]</span><br><span class="line">mov     [ecx+<span class="number">3</span>], al</span><br><span class="line">mov     edx, [ebp+var_8]</span><br><span class="line">add     edx, <span class="number">4</span></span><br><span class="line">mov     [ebp+var_8], edx</span><br><span class="line">jmp     loc_401718</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*(_BYTE *)(v4 + a2) = (v3 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v4 + a2 + <span class="number">1</span>) = (v3 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v4 + a2 + <span class="number">2</span>) = (v3 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(v4 + a2 + <span class="number">3</span>) = v3 &amp; <span class="number">1</span>;</span><br><span class="line">	v4 += <span class="number">4</span>;</span><br><span class="line">    result = ++v5;</span><br></pre></td></tr></table></figure>

<p>大致运算如上</p>
<h6 id="iiii-sub-401037"><a href="#iiii-sub-401037" class="headerlink" title="(iiii) sub_401037"></a>(iiii) sub_401037</h6><p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504211153608.png" alt="image-20210504211153608"></p>
<p>先调用memcpy函数将Src赋值给[ebp+var_20]</p>
<p>之后进行(20h)32轮循环，实现功能与sub_401014类似，这里不做重复说明</p>
<p>在sub_401032函数末尾</p>
<p>返回了sub_40102D函数</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504212306639.png" alt="image-20210504212306639"></p>
<p>有两层for循环，一层循环次数为[ebp+arg_8]，第二层循环次数为7，第一层循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     edx, [ebp+var_4]    <span class="comment">//第一层循环变量i</span></span><br><span class="line">mov     eax, [ebp+arg_0]</span><br><span class="line">xor     ecx, ecx</span><br><span class="line">mov     cl, [eax+edx*<span class="number">8</span>]       </span><br><span class="line">and     ecx, <span class="number">1</span>             <span class="comment">//([ebp+arg_0]+8*i)与1相与</span></span><br><span class="line">mov     <span class="keyword">byte</span> ptr [ebp+var_C], cl       <span class="comment">//结果存到[ebp+avr_C]</span></span><br><span class="line">mov     [ebp+var_8], <span class="number">1</span>     <span class="comment">//初始化第二层循环变量[ebp+var_8](用j表示)为1</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_4014A5</span><br></pre></td></tr></table></figure>

<p>跳转到下一层循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+var_C]</span><br><span class="line">and     eax, 0FFh              </span><br><span class="line">shl     eax, <span class="number">1</span>          <span class="comment">//eax左移1位即eax乘2     </span></span><br><span class="line">mov     <span class="keyword">byte</span> ptr [ebp+var_C], al</span><br><span class="line">mov     ecx, [ebp+var_C]</span><br><span class="line">and     ecx, 0FFh</span><br><span class="line">mov     edx, [ebp+var_4]</span><br><span class="line">mov     eax, [ebp+var_8]</span><br><span class="line">lea     edx, [eax+edx*<span class="number">8</span>]     <span class="comment">//(a+j+8*i)</span></span><br><span class="line">mov     eax, [ebp+arg_0]</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">mov     bl, [eax+edx]   <span class="comment">//结果存到bx寄存器低位</span></span><br><span class="line">and     ebx, <span class="number">1</span>    <span class="comment">//</span></span><br><span class="line">add     ecx, ebx</span><br><span class="line">mov     <span class="keyword">byte</span> ptr [ebp+var_C], cl   <span class="comment">//cl赋给ptr[ebp+var_C]</span></span><br><span class="line">jmp     <span class="keyword">short</span> loc_40149C</span><br></pre></td></tr></table></figure>

<p>到此sub_401032函数分析完毕，可知该函数为16次轮函数</p>
<p>回到主函数：</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504213924371.png" alt="image-20210504213924371"></p>
<p>第二块开始为for循环，[ebp+var2C]为循环变量，循环8次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mov     eax, [ebp+var_2C]</span><br><span class="line">xor     ecx, ecx   <span class="comment">//ecx清零</span></span><br><span class="line">mov     cl, [ebp+eax+var_28]   <span class="comment">//[ebp+var_28]和eax的和赋给cl,8位密文</span></span><br><span class="line">mov     edx, [ebp+var_2C]        </span><br><span class="line">xor     eax, eax       </span><br><span class="line">mov     al, byte_42AA30[edx]   <span class="comment">//byte数组（0xef,0x34,0xd4,0xa3,0xc6,0x84,0xe4,0x23）赋给al</span></span><br><span class="line">cmp     ecx, eax               <span class="comment">//判断ecx和eax是否相等</span></span><br><span class="line">jz      <span class="keyword">short</span> loc_401188</span><br></pre></td></tr></table></figure>

<p>若不相等则输出  Wrong! 相等则输出G00d Job!!</p>
<h2 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h2><p>初始密钥为：DE3_En1C</p>
<p>运用des解密算法可知明文为：HarDd3s?</p>
<p><img src="C:\Users\徐锐\AppData\Roaming\Typora\typora-user-images\image-20210504214456025.png" alt="image-20210504214456025"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/undefined/%5B%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%5D%20Crypto%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81&amp;&amp;%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&amp;&amp;hash%E5%87%BD%E6%95%B0%EF%BC%89.html</url>
    <content><![CDATA[<p>@<a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p>
<h1 id="一-常见加解密"><a href="#一-常见加解密" class="headerlink" title="一 . 常见加解密"></a>一 . 常见加解密</h1><h2 id="SM1-4"><a href="#SM1-4" class="headerlink" title="SM1-4"></a>SM1-4</h2><p>国密即国家密码局认定的国产密码算法。主要有SM1，SM2，SM3，SM4。密钥长度和分组长度均为128位。</p>
<p>SM1 为对称加密。其加密强度与AES相当。该算法不公开，调用该算法时，需要通过加密芯片的接口进行调用。</p>
<p>SM2为非对称加密，基于ECC。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC 256位（SM2采用的就是ECC 256位的一种）安全强度比RSA 2048位高，但运算速度快于RSA。</p>
<p>SM3 消息摘要。可以用MD5作为对比理解。该算法已公开。校验结果为256位。</p>
<p>SM4 无线局域网标准的分组数据算法。对称加密，密钥长度和分组长度均为128位。</p>
<h1 id="二-古典密码"><a href="#二-古典密码" class="headerlink" title="二. 古典密码"></a>二. 古典密码</h1><h2 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h2><p> 分类：</p>
<ul>
<li><p>移位（凯撒）密码<br><img src="https://img-blog.csdnimg.cn/20210421163417180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>仿射密码<br><img src="https://img-blog.csdnimg.cn/2021042116340479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>单表代换</p>
</li>
<li><p>多表代换</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210421163447210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h2><p><img src="https://img-blog.csdnimg.cn/20210421163320209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421163332972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Hill密码"><a href="#Hill密码" class="headerlink" title="Hill密码"></a>Hill密码</h2><p><img src="https://img-blog.csdnimg.cn/20210421163135304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421163148731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="转轮密码"><a href="#转轮密码" class="headerlink" title="转轮密码"></a>转轮密码</h2><p>恩格码机</p>
<h2 id="代换密码的唯密文攻击"><a href="#代换密码的唯密文攻击" class="headerlink" title="代换密码的唯密文攻击"></a>代换密码的唯密文攻击</h2><ul>
<li>1.统计攻击</li>
<li>2.重合指数法<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2></li>
</ul>
<ol>
<li>密码分析可分为那几类，它们的含义是什么？<br>根据密码分析者可能取得的分析资料的不同，密码分析（或称攻击）可分为下列四类：<br>1）唯密文分析（攻击），密码分析者取得一个或多个用同一密钥加密的密文；<br>2）已知明文分析（攻击），除要破译的密文外，密码分析者还取得一些用同一密钥加密的明密文对；<br>3）选择明文分析（攻击），密码分析者可取得他所选择的任何明文所对应的密文（当然不包括他要恢复的明文），这些明密文对和要破译的密文是用同一密钥加密的；<br>4）选择密文分析（攻击），密码分析者可取得他所选择的任何密文所对应的明文（要破译的密文除外），这些密文和明文和要破译的密文是用同一解密密钥解密的，它主要应用于公钥密码体制。</li>
<li>移位密码，仿射密码，单表代换密码都没有破坏明文的频率统计规律，可以直接用统计分析法<br><img src="https://img-blog.csdnimg.cn/20210421162140152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>字母频率分析法对（单表代换密码）算法最有效<br><img src="https://img-blog.csdnimg.cn/2021042116222073.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><img src="https://img-blog.csdnimg.cn/2021042116395986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421164031612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h1 id="三-对称加密算法"><a href="#三-对称加密算法" class="headerlink" title="三. 对称加密算法"></a>三. 对称加密算法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">引自合天网安实验室：https:&#x2F;&#x2F;www.hetianlab.com&#x2F;expc.do?ce&#x3D;7bbc91e0-a9b3-4af9-a108-ce94117ee430</span><br><span class="line">以及现代密码学（谷利泽版）</span><br></pre></td></tr></table></figure>
<h2 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h2><p>设计思想：</p>
<ul>
<li>混淆：明文/密钥和密文之间的关系复杂</li>
<li>分组：明文/密钥的每一个比特都影响密文的每一个比特<h3 id="DES算法（数据加密标准）"><a href="#DES算法（数据加密标准）" class="headerlink" title="DES算法（数据加密标准）"></a>DES算法（数据加密标准）</h3><h4 id="1-Feistel结构"><a href="#1-Feistel结构" class="headerlink" title="1. Feistel结构"></a>1. Feistel结构</h4>明文和密文分组长度为64Bit，密钥长度56bit（密钥空间2^56）<br>算法包括：迭代加密和密钥编排<br><img src="https://img-blog.csdnimg.cn/20210327093613965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>IP置换（初始置换）<br>根据初始置换表，将明文数据移到该数据所在位置<br><img src="https://img-blog.csdnimg.cn/20210415204556595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上表我们可以总结出，初始置换表的规律其实就是（其实不用太在意这个规律）：<pre><code>a. 偶数与奇数分开（1~64），然后分为上下两部分，分布在置换表中，偶数在上，奇数在下。
b. 在偶数与奇数内部，又遵从“从右到左，从上到下，从小到大”的排列。
</code></pre>
</li>
</ul>
<p> 实际中加密的是二进制数据，为直观展示这里用字母代替<br><img src="https://img-blog.csdnimg.cn/20210415204848819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>置换完<br><img src="https://img-blog.csdnimg.cn/20210415204908903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此我们便得到了初始置换之后的数据</p>
<pre><code>  Data=“5XPHzrjb7ZRJBtld91TLDvnf=3VNFxph4WOGyqia6YQI(i)Askc80SKCume+2UMEwog”

  L0 = “5XPHzrjb7ZRJBtld91TLDvnf=3VNFxph”

  R0 = “4WOGyqia6YQI(i)Askc80SKCume+2UMEwog”
</code></pre>
<h4 id="2-轮函数"><a href="#2-轮函数" class="headerlink" title="2. 轮函数"></a>2. 轮函数</h4><p><img src="https://img-blog.csdnimg.cn/20210327093642767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>函数 f主要对数据右半部分R进行操作<br>       a. 先对其进行扩展置换，使其变为48位的数据，<br>      b. 然后生成的数据再与子密钥进行异或运算，<br>      c. 再以异或运算后的48位数据进行S盒代替，将48位的数据，转换为32位的数据，<br>      d. 再进行P盒置换，生成32位的数据<br>      e. 最后将P盒置换生成的数据与本轮运算的L进行异或，生成新的R。<br>      f. 而新的L是直接由本轮的R进行替换</p>
<h4 id="3-密钥编排算法"><a href="#3-密钥编排算法" class="headerlink" title="3. 密钥编排算法"></a>3. 密钥编排算法</h4><ul>
<li>子密钥K的生成<br><img src="https://img-blog.csdnimg.cn/2021032711380330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>假设初始64位密钥：<br>“abcdefgh ijklmnop qrstuvwx yzABCDEF GHIJKLMN OPQRSTUV WXYZ0123 456789+=”<br>红色部分为奇偶校验位，不参与加密算法</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210415205310384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>初始压缩置换后：<br><img src="https://img-blog.csdnimg.cn/20210415205324273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看出压缩置换1的规律：<br><img src="https://img-blog.csdnimg.cn/20210415205416110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 压缩置换1接下来的是拆分：</p>
<pre><code>  K0=“4WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ+2UMEwog91TLDvnf80SKCumeBtld”

  C0=“4WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ”

  D0=“+2UMEwog91TLDvnf80SKCumeBtld”
  
  拆分之后我们得到C0、D0，再然后就是循环左移，求出C1、D1：
</code></pre>
<p>根据”轮数和左移位数”的对应表，第一轮得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C1&#x3D;“WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ4”</span><br><span class="line"></span><br><span class="line">D1&#x3D;“2UMEwog91TLDvnf80SKCumeBtld+”</span><br></pre></td></tr></table></figure>
<p>如上，左移的同时还要保持位数不变，所以移动的数据又补充到后面。<br> C1D1= “WOGyqia5XPHzrjb6YQI(i)Askc7ZRJ42UMEwog91TLDvnf80SKCumeBtld+”<br><img src="https://img-blog.csdnimg.cn/20210415205632541.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210415205810750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 压缩置换2<br> <img src="https://img-blog.csdnimg.cn/20210415205831221.png" alt="在这里插入图片描述"><br>得到子密钥K1<br><img src="https://img-blog.csdnimg.cn/20210415205855797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>K1=“jYH7WqG4bisPcI(i)zyR56aJArOvBM1KdUDe0wC8uL+otSnm92E”</p>
<ul>
<li><p>扩展置换E<br>将数据R（32位），按照每4位一组，拆分成8个组，如图，左右黑色的两列是扩展时添加的数据，中间的就是分组后的数据R，表中的数字代表数据R中的位置。分成8组织后，遵循这样的一个规则：每一组的头部添加本组数据上一组的尾部，每一组的尾部添加本组数据下一组的头部。即第一组数据，前面添加的是最后一组的最后一位数据，后面添加的是第二组的第一位数据…以此类推<br><img src="https://img-blog.csdnimg.cn/20210415210037507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因此，对R0进行扩展置换<br>R0=“4WOGyqia6YQI(i)Askc80SKCume+2UMEwog”<br><img src="https://img-blog.csdnimg.cn/20210415210108554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后我们便得到了扩展到48位的R0：</p>
<pre><code>R0=“g4WOGYGYqia6a6YQI(i)AI(i)Askc8c80SKCKCume+e+2UMEMEwog4”
</code></pre>
</li>
</ul>
<p>扩展置换E结束之后，我们要进行的就是K1与R0的异或运算</p>
<ul>
<li>S盒代替<br>S盒代替的作用，就是将我们上一步，R0与K1异或后得到的48位数据压缩为32位数据。</li>
</ul>
<p> 我们前面扩展置换后得到的R0是48位的数据，我们的S盒有8个，那么我们就需要将得到的R0平均分为8组，每组对应一个S盒。<br>每一组的数据长度为6位，假设第一组的二进制数据为：“100110”<br>那么，我们取第一位与最后一位，组成行数：“10”=2<br>取中间四位，组成列数：“0011”=3<br>那么，在对应的S1盒中，取2行3列的数据（第3行第4列）：8，转换为2进制：“1000”<br>那么就将这个得到的4位二进制数据，代替原来第一组的6位数据，这样一来，等8个S盒全部代替完毕，我们就得到32位的数据。<br><img src="https://img-blog.csdnimg.cn/20210415210327842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>P盒置换<br><img src="https://img-blog.csdnimg.cn/20210415210354388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此我们便得到了f(R0,K1),只要再与L0进行异或运算，就得到了第一轮运算最终的R1，然后再将R0的值赋给L1，就完成了第一轮的运算，得到了L1,R1。</li>
</ul>
<h4 id="4-末置换"><a href="#4-末置换" class="headerlink" title="4. 末置换"></a>4. 末置换</h4><p> 经过16次的运算，我们在函数f的最后，会得到“L16、R16”，这正是我们需要的，然后将L16与R16合并，但是与之前的步骤中的合并不同，此次合并需要先交换二者的位置，也就是应该是R16 L16。<br> <img src="https://img-blog.csdnimg.cn/20210415210531836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="5-安全增强"><a href="#5-安全增强" class="headerlink" title="5. 安全增强"></a>5. 安全增强</h4><p>（1）穷举搜索攻击<br>目标：给定输入输出对 (m i , c i = E(k, m i ))  i=1,..,3 ，寻找密钥 k.<br>（2）3DES</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">令 E : K × M -&gt;  M 是一个分组密码</span><br><span class="line">定义 3E: K^3 × M -&gt;M 为 </span><br><span class="line">3E ( (k 1 ,k 2 ,k 3 ), m ) &#x3D;E(k 3 ,E (k 2 , E(k 1 , m)))</span><br><span class="line">密钥长度 &#x3D; 3 × 56 &#x3D; 168 bits ( 穷举攻击复杂度≈2 ^118)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210327094233782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文章: <a href="https://blog.csdn.net/Drifter_Galaxy/article/details/107703454?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161680947816780261948053%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161680947816780261948053&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-107703454.pc_search_result_hbase_insert&utm_term=%E8%AF%81%E6%98%8E3DES%E7%A9%B7%E4%B8%BE%E6%94%BB%E5%87%BB%E5%A4%8D%E6%9D%82%E5%BA%A6&spm=1018.2226.3001.4187">DES 安全性&amp;3DES </a>, <a href="https://blog.csdn.net/chengqiuming/article/details/82191005?utm_source=blogxgwz7&ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%AF%81%E6%98%8E3DES%E7%A9%B7%E4%B8%BE%E6%94%BB%E5%87%BB%E5%A4%8D%E6%9D%82%E5%BA%A6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-82191005.pc_search_result_hbase_insert&spm=1018.2226.3001.4187">三重DES原理</a></p>
<h3 id="AES算法（高级加密标准）"><a href="#AES算法（高级加密标准）" class="headerlink" title="AES算法（高级加密标准）"></a>AES算法（高级加密标准）</h3><h4 id="对称加密流程"><a href="#对称加密流程" class="headerlink" title="对称加密流程"></a>对称加密流程</h4><p>分组加密算法：明文（128/256bit)和密文分组（128/192/256bit)可变长度<br>SPN结构：轮函数包括：代换层-置换层-密钥混合层<br>密钥长度：128bit（密钥空间2^128)  10轮<br><img src="https://img-blog.csdnimg.cn/20210419182424527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>包含4个步骤</p>
<ul>
<li><p>字节代替<br>  字节代替（SubBytes）的目的是通过S盒完成一个字节到另外一个字节的映射转换，字节替换为这个密码系统提供了替换性。<br><img src="https://img-blog.csdnimg.cn/20210419182655410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>行移位<br>行移位（ShiftRows）步骤过程中，每一行都向左循环位移某个偏移量。在AES中（区块大小128位），第一行维持不变，第二行里的每个字节都向左循环移动一格，第三行里的每个字节都向左循环移动二格，第四行里的每个字节都向左循环移动三格。经过行移位之后，矩阵中每一竖列，都是由输入矩阵中的每个不同列中的元素组成。<br><img src="https://img-blog.csdnimg.cn/20210419182747929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>列混淆<br><img src="https://img-blog.csdnimg.cn/20210419182857621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210419182917414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里有一个错误，初始矩阵为，另外列混淆中第二项02·6E=11011100<br><img src="https://img-blog.csdnimg.cn/20210419182946991.png" alt="在这里插入图片描述"><br>有限域上的字节运算：<br><img src="https://img-blog.csdnimg.cn/20210421141126686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<ul>
<li>轮密钥加</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2021041918302380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210419183116692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="AES的密钥编排算法"><a href="#AES的密钥编排算法" class="headerlink" title="AES的密钥编排算法"></a>AES的密钥编排算法</h4><ul>
<li>密钥扩展：<br><img src="https://img-blog.csdnimg.cn/20210421141856551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70"><h4 id="AES的解密变换"><a href="#AES的解密变换" class="headerlink" title="AES的解密变换"></a>AES的解密变换</h4><img src="https://img-blog.csdnimg.cn/20210421142126321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142146471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h3 id="分组密码的运行模式"><a href="#分组密码的运行模式" class="headerlink" title="分组密码的运行模式"></a>分组密码的运行模式</h3><h4 id="1-ECB模式"><a href="#1-ECB模式" class="headerlink" title="1. ECB模式"></a>1. ECB模式</h4><p><img src="https://img-blog.csdnimg.cn/20210421142435697.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142449671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421142423597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2-CBC模式"><a href="#2-CBC模式" class="headerlink" title="2. CBC模式"></a>2. CBC模式</h4><p><img src="https://img-blog.csdnimg.cn/20210421142506422.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142517978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142649479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421142550875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="3-CFB模式"><a href="#3-CFB模式" class="headerlink" title="3. CFB模式"></a>3. CFB模式</h4><p>反馈是指前一个密文分组的值会被送到密码算法的输入端。<br>在ECB模式和CBC模式中，明文分组都是通过密码算法进行加密的，然而，在CFB模式中，明文分组并没有通过密码算法来直接进行加密。</p>
<p>明文分组和密文分组之间并没有经过“加密”这一步骤。（加解密过程只调用加密算法这一个过程）在CFB模式中，明文分组和密文分组之间只有一个XOR。<br><img src="https://img-blog.csdnimg.cn/20210420201053534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021042114271241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>j通常为8<br><img src="https://img-blog.csdnimg.cn/20210421142730272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421142743599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>参考文章：<a href="https://blog.csdn.net/chengqiuming/article/details/82355772?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161891767816780255295685%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161891767816780255295685&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-82355772.pc_search_result_cache&utm_term=CFB%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%80%89%E6%8B%A9%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB">CFB原理</a></p>
<h4 id="4-CTR模式（计数器）"><a href="#4-CTR模式（计数器）" class="headerlink" title="4. CTR模式（计数器）"></a>4. CTR模式（计数器）</h4><p><img src="https://img-blog.csdnimg.cn/20210421142815910.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142830585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421142843607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><ol>
<li>1977年1月 DES正式成为美国联邦政府信息处理标准，即FIPS-46标准，1997年撤销，采用AES算法，新算法的分组长度为128比特，支持可变密钥长度128，192，256比特。<br>1999年最终选定Rijndanel算法为新的数据加密标准。</li>
<li>WAPI标准是中国颁布的无线局域网安全国家标准<br><img src="https://img-blog.csdnimg.cn/20210421160835894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210420203022130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421164610383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210421143901835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421143922448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210420203157783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210419183449768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210419183505545.png" alt="在这里插入图片描述"></p>
<h3 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h3><p>流密码核心：伪随机数生成器（PRG）</p>
<p>LFSR ：线性反馈移位寄存器（为线性函数）<br>密钥流{k}的周期一定要大<br><img src="https://img-blog.csdnimg.cn/20210421160532637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>例题：<br><img src="https://img-blog.csdnimg.cn/20210421160418343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021042116045197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="RC4算法（序列密码）"><a href="#RC4算法（序列密码）" class="headerlink" title="RC4算法（序列密码）"></a>RC4算法（序列密码）</h3><ul>
<li>KSA <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//S 表随机化</span></span><br><span class="line">s[i] 数据</span><br><span class="line">t[i] 密钥</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="function">	j </span>= (j+s[i]+t[i])%n;</span><br><span class="line">	s[i],s[j]=s[j],s[i];</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
<li>PRGA(伪随机数生成算法）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i = (i+<span class="number">1</span>)%n</span><br><span class="line">j =  (j+s[i])%n</span><br><span class="line">swap(s[i],s[j])</span><br><span class="line">t = (s[i]+s[j])%n</span><br><span class="line">k = s[t]</span><br></pre></td></tr></table></figure></li>
<li>RC4应用<br><img src="https://img-blog.csdnimg.cn/20210421160146382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h4 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h4><p><img src="https://img-blog.csdnimg.cn/20210421161055387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210421161139913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>13. 一般的，一个反馈移位寄存器由两部分组成：移位寄存器和反馈函数<br><img src="https://img-blog.csdnimg.cn/20210421161203619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="四-Hash函数"><a href="#四-Hash函数" class="headerlink" title="四. Hash函数"></a>四. Hash函数</h1><h2 id="SHA-256算法"><a href="#SHA-256算法" class="headerlink" title="SHA-256算法"></a>SHA-256算法</h2><p><img src="https://img-blog.csdnimg.cn/20210419210353248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h2><p><img src="https://img-blog.csdnimg.cn/20210421161328124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>hash函数的抗二次原像性：对于给定的消息M1，发现另一个消息M2，使得H(M1)=H(M2)在计算上是不可行的。<br>抗碰撞性：找到任意一对不同的M1和M2，使得H（M1）=H（M2）在计算上是不可行的。<br><img src="https://img-blog.csdnimg.cn/20210421161358965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM0NTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
</search>
